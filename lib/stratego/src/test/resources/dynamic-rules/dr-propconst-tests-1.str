module dr-propconst-tests-1
imports
  dr-test-utils

/**
 * This test suite uses constant propagation for TIL programs
 * as a real-life test of the dynamic rules library.
 */

strategies

  main =
    propconst-tests-1

  propconst-tests-1 =
    test-suite(!"Dynamic Rules Library -- Constant Propagation (part 1)",
      where(separation-message(|"Dynamic Rules Library -- Constant Propagation -- Basic Tests"))
    ; pc-basic-tests
    ; where(separation-message(|"Dynamic Rules Library -- Constant Propagation -- Intersection Tests"))
    ; where(description-message(|"  notation in test names: rule before applying intersection"))
    ; where(description-message(|"                          < rule in left branch"))
    ; where(description-message(|"                          + rule in right branch"))
    ; where(description-message(|"  (x,val) means rule with key x, and val decodes like this:"))
    ; where(description-message(|"    - same letter means redefinition with the same value"))
    ; where(description-message(|"    - different letter means redefinition with a different value"))
    ; where(description-message(|"    - \"undef\" means undefinition of rule"))
    ; where(description-message(|"    - \"none\" means no change to rule"))
    ; where(description-message(|"    - \"empty\" means no rule is defined at that point"))
    ; pc-intersection-tests
    ; where(separation-message(|"Dynamic Rules Library -- Constant Propagation -- Fix and Intersect Tests"))
    ; where(description-message(|"  notation in test names: rule before applying intersection"))
    ; where(description-message(|"                          ; [rule in iteration]*"))
    ; where(description-message(|"  (x,val) decodes as before"))
    ; pc-fix-and-intersect-tests
    ; where(separation-message(|"Dynamic Rules Library -- Constant Propagation -- Break Tests"))
    ; pc-break-tests
    ; where(separation-message(|"Dynamic Rules Library -- Constant Propagation -- Break to Label Tests"))
    ; pc-break-to-label-tests
    ; where(separation-message(|"Dynamic Rules Library -- Constant Propagation -- Continue Tests"))
    ; pc-continue-tests
    ; where(separation-message(|"Dynamic Rules Library -- Constant Propagation -- Continue to Label Tests"))
    ; pc-continue-to-label-tests
    )

strategies

  pc-basic-tests = id

  ; apply-propconst-test(!"Check rule definition (top scope)" |
      "var x; x := 0; f(x);",
      "var x; x := 0; f(0);"
    )

  ; apply-propconst-test(!"Check rule redefinition with the same value (top scope)" |
      "var x; x := 0; f(x); x := 0; f(x);",
      "var x; x := 0; f(0); x := 0; f(0);"
    )

  ; apply-propconst-test(!"Check rule redefinition with a different value (top scope)" |
      "var x; x := 0; f(x); x := 1; f(x);",
      "var x; x := 0; f(0); x := 1; f(1);"
    )

  ; apply-propconst-test(!"Check rule undefinition (top scope)" |
      "var x; var y; x := 0; f(x); x := y; f(x);",
      "var x; var y; x := 0; f(0); x := y; f(x);"
    )

  ; apply-propconst-test(!"Check rule undefinition and redefinition with the same value (top scope)" |
      "var x; var y; x := 0; f(x); x := y; f(x); x := 0; f(x);",
      "var x; var y; x := 0; f(0); x := y; f(x); x := 0; f(0);"
    )

  ; apply-propconst-test(!"Check rule undefinition and redefinition with a different value (top scope)" |
      "var x; var y; x := 0; f(x); x := y; f(x); x := 1; f(x);",
      "var x; var y; x := 0; f(0); x := y; f(x); x := 1; f(1);"
    )

  ; apply-propconst-test(!"Check rule lookup after definition (top scope)" |
      "var x; var y; var z; x := 0; y := 1; z := 2; f(x, y, z);",
      "var x; var y; var z; x := 0; y := 1; z := 2; f(0, 1, 2);"
    )

  ; apply-propconst-test(!"Check rule lookup after redefinition (top scope)" |
      "var x; var y; var z; x := 0; y := 1; z := 2; x := 0; y := 2; f(x, y, z);",
      "var x; var y; var z; x := 0; y := 1; z := 2; x := 0; y := 2; f(0, 2, 2);"
    )

  ; apply-propconst-test(!"Check rule definition (nested scope)" |
      "begin var x; x := 0; f(x); end",
      "begin var x; x := 0; f(0); end"
    )

  ; apply-propconst-test(!"Check rule redefinition with the same value (nested scope)" |
      "begin var x; x := 0; f(x); x := 0; f(x); end",
      "begin var x; x := 0; f(0); x := 0; f(0); end"
    )

  ; apply-propconst-test(!"Check rule redefinition with a different value (nested scope)" |
      "begin var x; x := 0; f(x); x := 1; f(x); end",
      "begin var x; x := 0; f(0); x := 1; f(1); end"
    )

  ; apply-propconst-test(!"Check rule undefinition (nested scope)" |
      "begin var x; var y; x := 0; f(x); x := y; f(x); end",
      "begin var x; var y; x := 0; f(0); x := y; f(x); end"
    )

  ; apply-propconst-test(!"Check rule undefinition and redefinition with the same value (nested scope)" |
      "begin var x; var y; x := 0; f(x); x := y; f(x); x := 0; f(x); end",
      "begin var x; var y; x := 0; f(0); x := y; f(x); x := 0; f(0); end"
    )

  ; apply-propconst-test(!"Check rule undefinition and redefinition with a different value (nested scope)" |
      "begin var x; var y; x := 0; f(x); x := y; f(x); x := 1; f(x); end",
      "begin var x; var y; x := 0; f(0); x := y; f(x); x := 1; f(1); end"
    )

  ; apply-propconst-test(!"Check rule lookup after definition (nested scope)" |
      "begin var x; var y; var z; x := 0; y := 1; z := 2; f(x, y, z); end",
      "begin var x; var y; var z; x := 0; y := 1; z := 2; f(0, 1, 2); end"
    )

  ; apply-propconst-test(!"Check rule lookup after redefinition (nested scope)" |
      "begin var x; var y; var z; x := 0; y := 1; z := 2; x := 0; y := 2; f(x, y, z); end",
      "begin var x; var y; var z; x := 0; y := 1; z := 2; x := 0; y := 2; f(0, 2, 2); end"
    )

  ; apply-propconst-test(!"Check rule definition (across scope)" |
      "var x; begin x := 0; f(x); end f(x);",
      "var x; begin x := 0; f(0); end f(0);"
    )

  ; apply-propconst-test(!"Check rule redefinition with the same value (across scope)" |
      "var x; x := 0; begin x := 0; f(x); end f(x);",
      "var x; x := 0; begin x := 0; f(0); end f(0);"
    )

  ; apply-propconst-test(!"Check rule redefinition with a different value (across scope)" |
      "var x; x := 0; begin x := 1; f(x); end f(x);",
      "var x; x := 0; begin x := 1; f(1); end f(1);"
    )

  ; apply-propconst-test(!"Check rule undefinition (across scope)" |
      "var x; var y; x := 0; begin x := y; f(x); end f(x);",
      "var x; var y; x := 0; begin x := y; f(x); end f(x);"
    )

  ; apply-propconst-test(!"Check rule undefinition and redefinition with the same value (across scope)" |
      "var x; var y; x := 0; begin x := y; f(x); x := 0; f(x); end f(x);",
      "var x; var y; x := 0; begin x := y; f(x); x := 0; f(0); end f(0);"
    )

  ; apply-propconst-test(!"Check rule undefinition and redefinition with a different value (across scope)" |
      "var x; var y; x := 0; begin x := y; f(x); x := 1; f(x); end f(x);",
      "var x; var y; x := 0; begin x := y; f(x); x := 1; f(1); end f(1);"
    )

  ; apply-propconst-test(!"Check rule lookup after definition (across scope)" |
      "var x; var y; var z; x := 0; y := 1; z := 2; begin f(x, y, z); end",
      "var x; var y; var z; x := 0; y := 1; z := 2; begin f(0, 1, 2); end"
    )

  ; apply-propconst-test(!"Check rule lookup after redefinition (across scope)" |
      "var x; var y; var z; x := 0; y := 1; z := 2; x := 0; y := 2; begin f(x, y, z); end",
      "var x; var y; var z; x := 0; y := 1; z := 2; x := 0; y := 2; begin f(0, 2, 2); end"
    )

  ; apply-propconst-test(!"Check rule definitions with the same value (nested scopes)" |
      "var x; x := 0; f(x); begin var x; x := 0; f(x); begin var x; x := 0; f(x); end f(x); end f(x);",
      "var x; x := 0; f(0); begin var x; x := 0; f(0); begin var x; x := 0; f(0); end f(0); end f(0);"
    )

  ; apply-propconst-test(!"Check rule definitions with different values (nested scopes)" |
      "var x; x := 0; f(x); begin var x; x := 1; f(x); begin var x; x := 1; f(x); end f(x); end f(x);",
      "var x; x := 0; f(0); begin var x; x := 1; f(1); begin var x; x := 1; f(1); end f(1); end f(0);"
    )

  ; apply-propconst-test(!"Check rule definitions with different values (nested scopes)" |
      "var x; x := 0; f(x); begin var x; x := 1; f(x); begin var x; x := 2; f(x); end f(x); end f(x);",
      "var x; x := 0; f(0); begin var x; x := 1; f(1); begin var x; x := 2; f(2); end f(1); end f(0);"
    )

  ; apply-propconst-test(!"Check rule definitions/undefinitions with the same value (nested scopes)" |
      "var x; x := 0; f(x); begin var x; x := 0; f(x); x := y; f(x); end f(x);",
      "var x; x := 0; f(0); begin var x; x := 0; f(0); x := y; f(x); end f(0);"
    )
    
  ; apply-propconst-test(!"Check rule definitions/undefinitions with different values (nested scopes)" |
      "var x; x := 0; f(x); begin var x; x := 1; f(x); x := y; f(x); end f(x);",
      "var x; x := 0; f(0); begin var x; x := 1; f(1); x := y; f(x); end f(0);"
    )

strategies

  pc-intersection-tests = id

  ; apply-propconst-test(!"Check rule set after (x,a) < (x,a) + (x,a)" |
      "var x; x := 0; if c() then x := 0; else x := 0; end f(x);",
      "var x; x := 0; if c() then x := 0; else x := 0; end f(0);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a) < (x,a) + (x,b)" |
      "var x; x := 0; if c() then x := 0; else x := 1; end f(x);",
      "var x; x := 0; if c() then x := 0; else x := 1; end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a) < (x,b) + (x,a)" |
      "var x; x := 0; if c() then x := 1; else x := 0; end f(x);",
      "var x; x := 0; if c() then x := 1; else x := 0; end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a) < (x,b) + (x,c)" |
      "var x; x := 0; if c() then x := 1; else x := 2; end f(x);",
      "var x; x := 0; if c() then x := 1; else x := 2; end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a) < (x,a) + (x,none)" |
      "var x; x := 0; if c() then x := 0; else dummy(); end f(x);",
      "var x; x := 0; if c() then x := 0; else dummy(); end f(0);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a) < (x,none) + (x,a)" |
      "var x; x := 0; if c() then dummy(); else x := 0; end f(x);",
      "var x; x := 0; if c() then dummy(); else x := 0; end f(0);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a) < (x,b) + (x,none)" |
      "var x; x := 0; if c() then x := 1; else dummy(); end f(x);",
      "var x; x := 0; if c() then x := 1; else dummy(); end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a) < (x,none) + (x,b)" |
      "var x; x := 0; if c() then dummy(); else x := 1; end f(x);",
      "var x; x := 0; if c() then dummy(); else x := 1; end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a) < (x,none) + (x,none)" |
      "var x; x := 0; if c() then dummy(); else dummy(); end f(x);",
      "var x; x := 0; if c() then dummy(); else dummy(); end f(0);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a) < (x,a) + (x,undef)" |
      "var x; var y; x := 0; if c() then x := 0; else x := y; end f(x);",
      "var x; var y; x := 0; if c() then x := 0; else x := y; end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a) < (x,undef) + (x,a)" |
      "var x; var y; x := 0; if c() then x := y; else x := 0; end f(x);",
      "var x; var y; x := 0; if c() then x := y; else x := 0; end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a) < (x,b) + (x,undef)" |
      "var x; var y; x := 0; if c() then x := 1; else x := y; end f(x);",
      "var x; var y; x := 0; if c() then x := 1; else x := y; end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a) < (x,undef) + (x,b)" |
      "var x; var y; x := 0; if c() then x := y; else x := 1; end f(x);",
      "var x; var y; x := 0; if c() then x := y; else x := 1; end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a) < (x,undef) + (x,undef)" |
      "var x; var y; x := 0; if c() then x := y; else x := y; end f(x);",
      "var x; var y; x := 0; if c() then x := y; else x := y; end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a) < (x,none) + (x,undef)" |
      "var x; var y; x := 0; if c() then dummy(); else x := y; end f(x);",
      "var x; var y; x := 0; if c() then dummy(); else x := y; end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a) < (x,undef) + (x,none)" |
      "var x; var y; x := 0; if c() then x := y; else dummy(); end f(x);",
      "var x; var y; x := 0; if c() then x := y; else dummy(); end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,empty) < (x,a) + (x,a)" |
      "var x; if c() then x := 0; else x := 0; end f(x);",
      "var x; if c() then x := 0; else x := 0; end f(0);"
    )

  ; apply-propconst-test(!"Check rule set after (x,empty) < (x,a) + (x,b)" |
      "var x; if c() then x := 0; else x := 1; end f(x);",
      "var x; if c() then x := 0; else x := 1; end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,empty) < (x,a) + (x,none)" |
      "var x; if c() then x := 0; else dummy(); end f(x);",
      "var x; if c() then x := 0; else dummy(); end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,empty) < (x,none) + (x,a)" |
      "var x; if c() then dummy(); else x := 0; end f(x);",
      "var x; if c() then dummy(); else x := 0; end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,empty) < (x,none) + (x,none)" |
      "var x; if c() then dummy(); else dummy(); end f(x);",
      "var x; if c() then dummy(); else dummy(); end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,empty) < (x,a) + (x,undef)" |
      "var x; var y; if c() then x := 0; else x := y; end f(x);",
      "var x; var y; if c() then x := 0; else x := y; end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,empty) < (x,undef) + (x,a)" |
      "var x; var y; if c() then x := y; else x := 0; end f(x);",
      "var x; var y; if c() then x := y; else x := 0; end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,empty) < (x,undef) + (x,undef)" |
      "var x; var y; if c() then x := y; else x := y; end f(x);",
      "var x; var y; if c() then x := y; else x := y; end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,empty) < (x,none) + (x,undef)" |
      "var x; var y; if c() then dummy(); else x := y; end f(x);",
      "var x; var y; if c() then dummy(); else x := y; end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,empty) < (x,undef) + (x,none)" |
      "var x; var y; if c() then x := y; else dummy(); end f(x);",
      "var x; var y; if c() then x := y; else dummy(); end f(x);"
    )

  ; apply-propconst-test(!"Check rule set in right branch with (x,a) < (x,a) + (x,none)" |
      "var x; x := 0; if c() then x := 0; f(x); else f(x); end",
      "var x; x := 0; if c() then x := 0; f(0); else f(0); end"
    )

  ; apply-propconst-test(!"Check rule set in right branch with (x,a) < (x,b) + (x,none)" |
      "var x; x := 0; if c() then x := 1; f(x); else f(x); end",
      "var x; x := 0; if c() then x := 1; f(1); else f(0); end"
    )

  ; apply-propconst-test(!"Check rule set in right branch with (x,a) < (x,none) + (x,none)" |
      "var x; x := 0; if c() then dummy(); f(x); else f(x); end",
      "var x; x := 0; if c() then dummy(); f(0); else f(0); end"
    )

  ; apply-propconst-test(!"Check rule set in right branch with (x,a) < (x,undef) + (x,none)" |
      "var x; var y; x := 0; if c() then x := y; f(x); else f(x); end",
      "var x; var y; x := 0; if c() then x := y; f(x); else f(0); end"
    )

  ; apply-propconst-test(!"Check rule set in left branch with (x,a) < (x,none) + (x,a)" |
      "var x; x := 0; if c() then f(x); else x := 0; f(x); end",
      "var x; x := 0; if c() then f(0); else x := 0; f(0); end"
    )

  ; apply-propconst-test(!"Check rule set in left branch with (x,a) < (x,none) + (x,b)" |
      "var x; x := 0; if c() then f(x); else x := 1; f(x); end",
      "var x; x := 0; if c() then f(0); else x := 1; f(1); end"
    )

  ; apply-propconst-test(!"Check rule set in left branch with (x,a) < (x,none) + (x,none)" |
      "var x; x := 0; if c() then f(x); else dummy(); f(x); end",
      "var x; x := 0; if c() then f(0); else dummy(); f(0); end"
    )

  ; apply-propconst-test(!"Check rule set in left branch with (x,a) < (x,none) + (x,undef)" |
      "var x; var y; x := 0; if c() then f(x); else x := y; f(x); end",
      "var x; var y; x := 0; if c() then f(0); else x := y; f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in right branch with (x,empty) < (x,a) + (x,none)" |
      "var x; if c() then x := 0; f(x); else f(x); end",
      "var x; if c() then x := 0; f(0); else f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in right branch with (x,empty) < (x,none) + (x,none)" |
      "var x; if c() then dummy(); f(x); else f(x); end",
      "var x; if c() then dummy(); f(x); else f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in right branch with (x,empty) < (x,undef) + (x,none)" |
      "var x; var y; if c() then x := y; f(x); else f(x); end",
      "var x; var y; if c() then x := y; f(x); else f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in left branch with (x,empty) < (x,none) + (x,a)" |
      "var x; if c() then f(x); else x := 0; f(x); end",
      "var x; if c() then f(x); else x := 0; f(0); end"
    )

  ; apply-propconst-test(!"Check rule set in left branch with (x,empty) < (x,none) + (x,none)" |
      "var x; if c() then f(x); else dummy(); f(x); end",
      "var x; if c() then f(x); else dummy(); f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in left branch with (x,empty) < (x,none) + (x,undef)" |
      "var x; var y; if c() then f(x); else x := y; f(x); end",
      "var x; var y; if c() then f(x); else x := y; f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in nested branch with (x,a) < (x,a) < (x,a)" |
      "var x; x := 0; if c() then x := 0; if c() then x := 0; f(x); end end",
      "var x; x := 0; if c() then x := 0; if c() then x := 0; f(0); end end"
    )

  ; apply-propconst-test(!"Check rule set in nested branch with (x,a) < (x,a) < (x,b)" |
      "var x; x := 0; if c() then x := 0; if c() then x := 1; f(x); end end",
      "var x; x := 0; if c() then x := 0; if c() then x := 1; f(1); end end"
    )

  ; apply-propconst-test(!"Check rule set in nested branch with (x,a) < (x,b) < (x,a)" |
      "var x; x := 0; if c() then x := 1; if c() then x := 0; f(x); end end",
      "var x; x := 0; if c() then x := 1; if c() then x := 0; f(0); end end"
    )

  ; apply-propconst-test(!"Check rule set in nested branch with (x,a) < (x,b) < (x,b)" |
      "var x; x := 0; if c() then x := 1; if c() then x := 1; f(x); end end",
      "var x; x := 0; if c() then x := 1; if c() then x := 1; f(1); end end"
    )

  ; apply-propconst-test(!"Check rule set in nested branch with (x,a) < (x,b) < (x,c)" |
      "var x; x := 0; if c() then x := 1; if c() then x := 2; f(x); end end",
      "var x; x := 0; if c() then x := 1; if c() then x := 2; f(2); end end"
    )

  ; apply-propconst-test(!"Check rule set in nested branch with (x,a) < (x,none) < (x,a)" |
      "var x; x := 0; if c() then if c() then x := 0; f(x); end end",
      "var x; x := 0; if c() then if c() then x := 0; f(0); end end"
    )

  ; apply-propconst-test(!"Check rule set in nested branch with (x,a) < (x,none) < (x,b)" |
      "var x; x := 0; if c() then if c() then x := 1; f(x); end end",
      "var x; x := 0; if c() then if c() then x := 1; f(1); end end"
    )

  ; apply-propconst-test(!"Check rule set in nested branch with (x,a) < (x,a) < (x,none)" |
      "var x; x := 0; if c() then x := 0; if c() then f(x); end end",
      "var x; x := 0; if c() then x := 0; if c() then f(0); end end"
    )

  ; apply-propconst-test(!"Check rule set in nested branch with (x,a) < (x,b) < (x,none)" |
      "var x; x := 0; if c() then x := 1; if c() then f(x); end end",
      "var x; x := 0; if c() then x := 1; if c() then f(1); end end"
    )

  ; apply-propconst-test(!"Check rule set in nested branch with (x,a) < (x,none) < (x,none)" |
      "var x; x := 0; if c() then if c() then f(x); end end",
      "var x; x := 0; if c() then if c() then f(0); end end"
    )

  ; apply-propconst-test(!"Check rule set in nested branch with (x,a) < (x,undef) < (x,a)" |
      "var x; var y; x := 0; if c() then x := y; if c() then x := 0; f(x); end end",
      "var x; var y; x := 0; if c() then x := y; if c() then x := 0; f(0); end end"
    )

  ; apply-propconst-test(!"Check rule set in nested branch with (x,a) < (x,undef) < (x,b)" |
      "var x; var y; x := 0; if c() then x := y; if c() then x := 1; f(x); end end",
      "var x; var y; x := 0; if c() then x := y; if c() then x := 1; f(1); end end"
    )

  ; apply-propconst-test(!"Check rule set in nested branch with (x,a) < (x,a) < (x,undef)" |
      "var x; var y; x := 0; if c() then x := 0; if c() then x := y; f(x); end end",
      "var x; var y; x := 0; if c() then x := 0; if c() then x := y; f(x); end end"
    )

  ; apply-propconst-test(!"Check rule set in nested branch with (x,a) < (x,b) < (x,undef)" |
      "var x; var y; x := 0; if c() then x := 1; if c() then x := y; f(x); end end",
      "var x; var y; x := 0; if c() then x := 1; if c() then x := y; f(x); end end"
    )

  ; apply-propconst-test(!"Check rule set in nested branch with (x,a) < (x,undef) < (x,undef)" |
      "var x; var y; x := 0; if c() then x := y; if c() then x := y; f(x); end end",
      "var x; var y; x := 0; if c() then x := y; if c() then x := y; f(x); end end"
    )

  ; apply-propconst-test(!"Check rule set in nested branch with (x,a) < (x,undef) < (x,none)" |
      "var x; var y; x := 0; if c() then x := y; if c() then f(x); end end",
      "var x; var y; x := 0; if c() then x := y; if c() then f(x); end end"
    )
    
  ; apply-propconst-test(!"Check rule set in nested branch with (x,a) < (x,none) < (x,undef)" |
      "var x; var y; x := 0; if c() then if c() then x := y; f(x); end end",
      "var x; var y; x := 0; if c() then if c() then x := y; f(x); end end"
    )

    // a - a - a
    //       \ b
    //   \ b - a
    //       \ b
  ; apply-propconst-test(!"Check complex intersection scenario #1" |
      "var x; x := 0;
       if c() then
         f(x); x := 0; f(x);
         if c() then f(x); x := 0; f(x);
         else        f(x); x := 1; f(x);
         end
         f(x);
       else
         f(x); x := 1; f(x);
         if c() then f(x); x := 0; f(x);
         else        f(x); x := 1; f(x);
         end
         f(x);
       end
       f(x);",
      "var x; x := 0;
       if c() then
         f(0); x := 0; f(0);
         if c() then f(0); x := 0; f(0);
         else        f(0); x := 1; f(1);
         end
         f(x);
       else
         f(0); x := 1; f(1);
         if c() then f(1); x := 0; f(0);
         else        f(1); x := 1; f(1);
         end
         f(x);
       end
       f(x);"
    )

    // a - a - a
    //       \ a
    //   \ b - b
    //       \ b
  ; apply-propconst-test(!"Check complex intersection scenario #2" |
      "var x; x := 0;
       if c() then
         f(x); x := 0; f(x);
         if c() then f(x); x := 0; f(x);
         else        f(x); x := 0; f(x);
         end
         f(x);
       else
         f(x); x := 1; f(x);
         if c() then f(x); x := 1; f(x);
         else        f(x); x := 1; f(x);
         end
         f(x);
       end
       f(x);",
      "var x; x := 0;
       if c() then
         f(0); x := 0; f(0);
         if c() then f(0); x := 0; f(0);
         else        f(0); x := 0; f(0);
         end
         f(0);
       else
         f(0); x := 1; f(1);
         if c() then f(1); x := 1; f(1);
         else        f(1); x := 1; f(1);
         end
         f(1);
       end
       f(x);"
    )

    // a - a - a
    //       \ a
    //   \ a - a
    //       \ a
  ; apply-propconst-test(!"Check complex intersection scenario #3" |
      "var x; x := 0;
       if c() then
         f(x); x := 0; f(x);
         if c() then f(x); x := 0; f(x);
         else        f(x); x := 0; f(x);
         end
         f(x);
       else
         f(x); x := 0; f(x);
         if c() then f(x); x := 0; f(x);
         else        f(x); x := 0; f(x);
         end
         f(x);
       end
       f(x);",
      "var x; x := 0;
       if c() then
         f(0); x := 0; f(0);
         if c() then f(0); x := 0; f(0);
         else        f(0); x := 0; f(0);
         end
         f(0);
       else
         f(0); x := 0; f(0);
         if c() then f(0); x := 0; f(0);
         else        f(0); x := 0; f(0);
         end
         f(0);
       end
       f(0);"
    )

    // a - b - a - b
    //       \ a /
    //   \ a - b
    //       \ b
  ; apply-propconst-test(!"Check complex intersection scenario #4" |
      "var x; x := 0;
       if c() then
         f(x); x := 1; f(x);
         if c() then f(x); x := 0; f(x);
         else        f(x); x := 0; f(x);
         end
         f(x); x := 1; f(x);
       else
         f(x); x := 0; f(x);
         if c() then f(x); x := 1; f(x);
         else        f(x); x := 1; f(x);
         end
         f(x);
       end
       f(x);",
      "var x; x := 0;
       if c() then
         f(0); x := 1; f(1);
         if c() then f(1); x := 0; f(0);
         else        f(1); x := 0; f(0);
         end
         f(0); x := 1; f(1);
       else
         f(0); x := 0; f(0);
         if c() then f(0); x := 1; f(1);
         else        f(0); x := 1; f(1);
         end
         f(1);
       end
       f(1);"
    )

    // a - b - a
    //       \ a
    //   \ b - a
    //       \ a
  ; apply-propconst-test(!"Check complex intersection scenario #5" |
      "var x; x := 0;
       if c() then
         f(x); x := 1; f(x);
         if c() then f(x); x := 0; f(x);
         else        f(x); x := 0; f(x);
         end
         f(x);
       else
         f(x); x := 1; f(x);
         if c() then f(x); x := 0; f(x);
         else        f(x); x := 0; f(x);
         end
         f(x);
       end
       f(x);",
      "var x; x := 0;
       if c() then
         f(0); x := 1; f(1);
         if c() then f(1); x := 0; f(0);
         else        f(1); x := 0; f(0);
         end
         f(0);
       else
         f(0); x := 1; f(1);
         if c() then f(1); x := 0; f(0);
         else        f(1); x := 0; f(0);
         end
         f(0);
       end
       f(0);"
    )

    // a - b - a - b
    //       \ a /
    //   \ b - a - b
    //       \ a /
  ; apply-propconst-test(!"Check complex intersection scenario #6" |
      "var x; x := 0;
       if c() then
         f(x); x := 1; f(x);
         if c() then f(x); x := 0; f(x);
         else        f(x); x := 0; f(x);
         end
         f(x); x := 1; f(x);
       else
         f(x); x := 1; f(x);
         if c() then f(x); x := 0; f(x);
         else        f(x); x := 0; f(x);
         end
         f(x); x := 1; f(x);
       end
       f(x);",
      "var x; x := 0;
       if c() then
         f(0); x := 1; f(1);
         if c() then f(1); x := 0; f(0);
         else        f(1); x := 0; f(0);
         end
         f(0); x := 1; f(1);
       else
         f(0); x := 1; f(1);
         if c() then f(1); x := 0; f(0);
         else        f(1); x := 0; f(0);
         end
         f(0); x := 1; f(1);
       end
       f(1);"
    )

    // a - a - b
    //       \ b
    //   \ a - b
    //       \ b
  ; apply-propconst-test(!"Check complex intersection scenario #7" |
      "var x; x := 0;
       if c() then
         f(x); x := 0; f(x);
         if c() then f(x); x := 1; f(x);
         else        f(x); x := 1; f(x);
         end
         f(x);
       else
         f(x); x := 0; f(x);
         if c() then f(x); x := 1; f(x);
         else        f(x); x := 1; f(x);
         end
         f(x);
       end
       f(x);",
      "var x; x := 0;
       if c() then
         f(0); x := 0; f(0);
         if c() then f(0); x := 1; f(1);
         else        f(0); x := 1; f(1);
         end
         f(1);
       else
         f(0); x := 0; f(0);
         if c() then f(0); x := 1; f(1);
         else        f(0); x := 1; f(1);
         end
         f(1);
       end
       f(1);"
    )

    // a - b - c
    //       \ c
    //   \ b - c
    //       \ c
  ; apply-propconst-test(!"Check complex intersection scenario #8" |
      "var x; x := 0;
       if c() then
         f(x); x := 1; f(x);
         if c() then f(x); x := 2; f(x);
         else        f(x); x := 2; f(x);
         end
         f(x);
       else
         f(x); x := 1; f(x);
         if c() then f(x); x := 2; f(x);
         else        f(x); x := 2; f(x);
         end
         f(x);
       end
       f(x);",
      "var x; x := 0;
       if c() then
         f(0); x := 1; f(1);
         if c() then f(1); x := 2; f(2);
         else        f(1); x := 2; f(2);
         end
         f(2);
       else
         f(0); x := 1; f(1);
         if c() then f(1); x := 2; f(2);
         else        f(1); x := 2; f(2);
         end
         f(2);
       end
       f(2);"
    )

    // a - b - c
    //       \ c
    //   \ c - b
    //       \ b
  ; apply-propconst-test(!"Check complex intersection scenario #9" |
      "var x; x := 0;
       if c() then
         f(x); x := 1; f(x);
         if c() then f(x); x := 2; f(x);
         else        f(x); x := 2; f(x);
         end
         f(x);
       else
         f(x); x := 2; f(x);
         if c() then f(x); x := 1; f(x);
         else        f(x); x := 1; f(x);
         end
         f(x);
       end
       f(x);",
      "var x; x := 0;
       if c() then
         f(0); x := 1; f(1);
         if c() then f(1); x := 2; f(2);
         else        f(1); x := 2; f(2);
         end
         f(2);
       else
         f(0); x := 2; f(2);
         if c() then f(2); x := 1; f(1);
         else        f(2); x := 1; f(1);
         end
         f(1);
       end
       f(x);"
    )

    // a - none - a
    //          \ a
    //   \ none - b
    //          \ b
  ; apply-propconst-test(!"Check complex intersection scenario #10" |
      "var x; x := 0;
       if c() then
         f(x);
         if c() then f(x); x := 0; f(x);
         else        f(x); x := 0; f(x);
         end
         f(x);
       else
         f(x);
         if c() then f(x); x := 1; f(x);
         else        f(x); x := 1; f(x);
         end
         f(x);
       end
       f(x);",
      "var x; x := 0;
       if c() then
         f(0);
         if c() then f(0); x := 0; f(0);
         else        f(0); x := 0; f(0);
         end
         f(0);
       else
         f(0);
         if c() then f(0); x := 1; f(1);
         else        f(0); x := 1; f(1);
         end
         f(1);
       end
       f(x);"
    )

    // a - none - a
    //          \ none
    //   \ none - none
    //          \ b
  ; apply-propconst-test(!"Check complex intersection scenario #11" |
      "var x; x := 0;
       if c() then
         f(x);
         if c() then f(x); x := 0; f(x);
         else        f(x);
         end
         f(x);
       else
         f(x);
         if c() then f(x);
         else        f(x); x := 1; f(x);
         end
         f(x);
       end
       f(x);",
      "var x; x := 0;
       if c() then
         f(0);
         if c() then f(0); x := 0; f(0);
         else        f(0);
         end
         f(0);
       else
         f(0);
         if c() then f(0);
         else        f(0); x := 1; f(1);
         end
         f(x);
       end
       f(x);"
    )

    // a - a - none - b
    //       \ none /
    //   \ b - none - b
    //       \ none /
  ; apply-propconst-test(!"Check complex intersection scenario #12" |
      "var x; x := 0;
       if c() then
         f(x); x := 0; f(x);
         if c() then f(x);
         else        f(x);
         end
         f(x); x := 1; f(x);
       else
         f(x); x := 1; f(x);
         if c() then f(x);
         else        f(x);
         end
         f(x); x := 1; f(x);
       end
       f(x);",
      "var x; x := 0;
       if c() then
         f(0); x := 0; f(0);
         if c() then f(0);
         else        f(0);
         end
         f(0); x := 1; f(1);
       else
         f(0); x := 1; f(1);
         if c() then f(1);
         else        f(1);
         end
         f(1); x := 1; f(1);
       end
       f(1);"
    )

    // a - a - none
    //       \ a
    //   \ b - a
    //       \ none
  ; apply-propconst-test(!"Check complex intersection scenario #13" |
      "var x; x := 0;
       if c() then
         f(x); x := 0; f(x);
         if c() then f(x);
         else        f(x); x := 0; f(x);
         end
         f(x);
       else
         f(x); x := 1; f(x);
         if c() then f(x); x := 0; f(x);
         else        f(x);
         end
         f(x);
       end
       f(x);",
      "var x; x := 0;
       if c() then
         f(0); x := 0; f(0);
         if c() then f(0);
         else        f(0); x := 0; f(0);
         end
         f(0);
       else
         f(0); x := 1; f(1);
         if c() then f(1); x := 0; f(0);
         else        f(1);
         end
         f(x);
       end
       f(x);"
    )

    // a - none - a
    //          \ b
    //   \ a    - b
    //          \ none
  ; apply-propconst-test(!"Check complex intersection scenario #14" |
      "var x; x := 0;
       if c() then
         f(x);
         if c() then f(x); x := 0; f(x);
         else        f(x); x := 1; f(x);
         end
         f(x);
       else
         f(x); x := 0; f(x);
         if c() then f(x); x := 1; f(x);
         else        f(x);
         end
         f(x);
       end
       f(x);",
      "var x; x := 0;
       if c() then
         f(0);
         if c() then f(0); x := 0; f(0);
         else        f(0); x := 1; f(1);
         end
         f(x);
       else
         f(0); x := 0; f(0);
         if c() then f(0); x := 1; f(1);
         else        f(0);
         end
         f(x);
       end
       f(x);"
    )

    // a - b - b
    //       \ none
    //   \ c - none
    //       \ b
  ; apply-propconst-test(!"Check complex intersection scenario #15" |
      "var x; x := 0;
       if c() then
         f(x); x := 1; f(x);
         if c() then f(x); x := 1; f(x);
         else        f(x);
         end
         f(x);
       else
         f(x); x := 2; f(x);
         if c() then f(x);
         else        f(x); x := 1; f(x);
         end
         f(x);
       end
       f(x);",
      "var x; x := 0;
       if c() then
         f(0); x := 1; f(1);
         if c() then f(1); x := 1; f(1);
         else        f(1);
         end
         f(1);  // here's the culprit, propconst (incorrectly) yields f(x)
       else
         f(0); x := 2; f(2);
         if c() then f(2);
         else        f(2); x := 1; f(1);
         end
         f(x);
       end
       f(x);"
    )

    // a - undef - a
    //           \ a
    //   \ undef - b
    //           \ b
  ; apply-propconst-test(!"Check complex intersection scenario #16" |
      "var x; var y; x := 0;
       if c() then
         f(x); x := y; f(x);
         if c() then f(x); x := 0; f(x);
         else        f(x); x := 0; f(x);
         end
         f(x);
       else
         f(x); x := y; f(x);
         if c() then f(x); x := 1; f(x);
         else        f(x); x := 1; f(x);
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 0;
       if c() then
         f(0); x := y; f(x);
         if c() then f(x); x := 0; f(0);
         else        f(x); x := 0; f(0);
         end
         f(0);
       else
         f(0); x := y; f(x);
         if c() then f(x); x := 1; f(1);
         else        f(x); x := 1; f(1);
         end
         f(1);
       end
       f(x);"
    )

    // a - undef - a
    //           \ undef
    //   \ undef - undef
    //           \ b
  ; apply-propconst-test(!"Check complex intersection scenario #17" |
      "var x; var y; x := 0;
       if c() then
         f(x); x := y; f(x);
         if c() then f(x); x := 0; f(x);
         else        f(x); x := y; f(x);
         end
         f(x);
       else
         f(x); x := y; f(x);
         if c() then f(x); x := y; f(x);
         else        f(x); x := 1; f(x);
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 0;
       if c() then
         f(0); x := y; f(x);
         if c() then f(x); x := 0; f(0);
         else        f(x); x := y; f(x);
         end
         f(x);
       else
         f(0); x := y; f(x);
         if c() then f(x); x := y; f(x);
         else        f(x); x := 1; f(1);
         end
         f(x);
       end
       f(x);"
    )

    // a - a - undef - b
    //       \ undef /
    //   \ b - undef - b
    //       \ undef /
  ; apply-propconst-test(!"Check complex intersection scenario #18" |
      "var x; var y; x := 0;
       if c() then
         f(x); x := 0; f(x);
         if c() then f(x); x := y; f(x);
         else        f(x); x := y; f(x);
         end
         f(x); x := 1; f(x);
       else
         f(x); x := 1; f(x);
         if c() then f(x); x := y; f(x);
         else        f(x); x := y; f(x);
         end
         f(x); x := 1; f(x);
       end
       f(x);",
      "var x; var y; x := 0;
       if c() then
         f(0); x := 0; f(0);
         if c() then f(0); x := y; f(x);
         else        f(0); x := y; f(x);
         end
         f(x); x := 1; f(1);
       else
         f(0); x := 1; f(1);
         if c() then f(1); x := y; f(x);
         else        f(1); x := y; f(x);
         end
         f(x); x := 1; f(1);
       end
       f(1);"
    )

    // a - a - undef
    //       \ a
    //   \ b - a
    //       \ undef
  ; apply-propconst-test(!"Check complex intersection scenario #19" |
      "var x; var y; x := 0;
       if c() then
         f(x); x := 0; f(x);
         if c() then f(x); x := y; f(x);
         else        f(x); x := 0; f(x);
         end
         f(x);
       else
         f(x); x := 1; f(x);
         if c() then f(x); x := 0; f(x);
         else        f(x); x := y; f(x);
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 0;
       if c() then
         f(0); x := 0; f(0);
         if c() then f(0); x := y; f(x);
         else        f(0); x := 0; f(0);
         end
         f(x);
       else
         f(0); x := 1; f(1);
         if c() then f(1); x := 0; f(0);
         else        f(1); x := y; f(x);
         end
         f(x);
       end
       f(x);"
    )

    // a - undef - a
    //           \ b
    //   \ a     - b
    //           \ undef
  ; apply-propconst-test(!"Check complex intersection scenario #20" |
      "var x; var y; x := 0;
       if c() then
         f(x); x := y; f(x);
         if c() then f(x); x := 0; f(x);
         else        f(x); x := 1; f(x);
         end
         f(x);
       else
         f(x); x := 0; f(x);
         if c() then f(x); x := 1; f(x);
         else        f(x); x := y; f(x);
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 0;
       if c() then
         f(0); x := y; f(x);
         if c() then f(x); x := 0; f(0);
         else        f(x); x := 1; f(1);
         end
         f(x);
       else
         f(0); x := 0; f(0);
         if c() then f(0); x := 1; f(1);
         else        f(0); x := y; f(x);
         end
         f(x);
       end
       f(x);"
    )

    // a - b - b
    //       \ undef
    //   \ c - undef
    //       \ b
  ; apply-propconst-test(!"Check complex intersection scenario #21" |
      "var x; var y; x := 0;
       if c() then
         f(x); x := 1; f(x);
         if c() then f(x); x := 1; f(x);
         else        f(x); x := y; f(x);
         end
         f(x);
       else
         f(x); x := 2; f(x);
         if c() then f(x); x := y; f(x);
         else        f(x); x := 1; f(x);
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 0;
       if c() then
         f(0); x := 1; f(1);
         if c() then f(1); x := 1; f(1);
         else        f(1); x := y; f(x);
         end
         f(x);
       else
         f(0); x := 2; f(2);
         if c() then f(2); x := y; f(x);
         else        f(2); x := 1; f(1);
         end
         f(x);
       end
       f(x);"
    )

    // a - undef - none  - b
    //           \ b     /
    //   \ b     - undef - b
    //           \ none /
  ; apply-propconst-test(!"Check complex intersection scenario #22" |
      "var x; var y; x := 0;
       if c() then
         f(x); x := y; f(x);
         if c() then f(x);
         else        f(x); x := 1; f(x);
         end
         f(x); x := 1; f(x);
       else
         f(x); x := 1; f(x);
         if c() then f(x); x := y; f(x);
         else        f(x);
         end
         f(x); x := 1; f(x);
       end
       f(x);",
      "var x; var y; x := 0;
       if c() then
         f(0); x := y; f(x);
         if c() then f(x);
         else        f(x); x := 1; f(1);
         end
         f(x); x := 1; f(1);
       else
         f(0); x := 1; f(1);
         if c() then f(1); x := y; f(x);
         else        f(1);
         end
         f(x); x := 1; f(1);
       end
       f(1);"
    )

    // a - a    - undef - a
    //          \ none  /
    //   \ none - undef - b
    //          \ a     /
  ; apply-propconst-test(!"Check complex intersection scenario #23" |
      "var x; var y; x := 0;
       if c() then
         f(x); x := 0; f(x);
         if c() then f(x); x := y; f(x);
         else        f(x);
         end
         f(x); x := 0; f(x);
       else
         f(x); x := 0; f(x);
         if c() then f(x); x := y; f(x);
         else        f(x); x := 0; f(x);
         end
         f(x); x := 1; f(x);
       end
       f(x);",
      "var x; var y; x := 0;
       if c() then
         f(0); x := 0; f(0);
         if c() then f(0); x := y; f(x);
         else        f(0);
         end
         f(x); x := 0; f(0);
       else
         f(0); x := 0; f(0);
         if c() then f(0); x := y; f(x);
         else        f(0); x := 0; f(0);
         end
         f(x); x := 1; f(1);
       end
       f(x);"
    )

    // a - undef - none - b
    //           \ none /
    //   \ undef - a    - b
    //           \ none /
  ; apply-propconst-test(!"Check complex intersection scenario #24" |
      "var x; var y; x := 0;
       if c() then
         f(x); x := y; f(x);
         if c() then f(x);
         else        f(x);
         end
         f(x); x := 1; f(x);
       else
         f(x); x := y; f(x);
         if c() then f(x); x := 0; f(x);
         else        f(x);
         end
         f(x); x := 1; f(x);
       end
       f(x);",
      "var x; var y; x := 0;
       if c() then
         f(0); x := y; f(x);
         if c() then f(x);
         else        f(x);
         end
         f(x); x := 1; f(1);
       else
         f(0); x := y; f(x);
         if c() then f(x); x := 0; f(0);
         else        f(x);
         end
         f(x); x := 1; f(1);
       end
       f(1);"
    )

    // a - none - undef
    //          \ b
    //   \ none - undef - a
    //          \ undef /
  ; apply-propconst-test(!"Check complex intersection scenario #25" |
      "var x; var y; x := 0;
       if c() then
         f(x);
         if c() then f(x); x := y; f(x);
         else        f(x); x := 1; f(x);
         end
         f(x);
       else
         f(x);
         if c() then f(x); x := y; f(x);
         else        f(x); x := y; f(x);
         end
         f(x); x := 0; f(x);
       end
       f(x);",
      "var x; var y; x := 0;
       if c() then
         f(0);
         if c() then f(0); x := y; f(x);
         else        f(0); x := 1; f(1);
         end
         f(x);
       else
         f(0);
         if c() then f(0); x := y; f(x);
         else        f(0); x := y; f(x);
         end
         f(x); x := 0; f(0);
       end
       f(x);"
    )

    // a - a - none  - a
    //       \ none  /
    //   \ a - undef - a
    //       \ undef /
  ; apply-propconst-test(!"Check complex intersection scenario #26" |
      "var x; var y; x := 0;
       if c() then
         f(x); x := 0; f(x);
         if c() then f(x);
         else        f(x);
         end
         f(x); x := 0; f(x);
       else
         f(x); x := 0; f(x);
         if c() then f(x); x := y; f(x);
         else        f(x); x := y; f(x);
         end
         f(x); x := 0; f(x);
       end
       f(x);",
      "var x; var y; x := 0;
       if c() then
         f(0); x := 0; f(0);
         if c() then f(0);
         else        f(0);
         end
         f(0); x := 0; f(0);
       else
         f(0); x := 0; f(0);
         if c() then f(0); x := y; f(x);
         else        f(0); x := y; f(x);
         end
         f(x); x := 0; f(0);
       end
       f(0);"
    )

strategies

  pc-fix-and-intersect-tests = id

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,a)]*" |
      "var x; x := 1; while c() do x := 1; end f(x);",
      "var x; x := 1; while c() do x := 1; end f(1);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,b)]*" |
      "var x; x := 1; while c() do x := 2; end f(x);",
      "var x; x := 1; while c() do x := 2; end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,none)]*" |
      "var x; x := 1; while c() do dummy(); end f(x);",
      "var x; x := 1; while c() do dummy(); end f(1);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,undef)]*" |
      "var x; var y; x := 1; while c() do x := y; end f(x);",
      "var x; var y; x := 1; while c() do x := y; end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,empty); [(x,a)]*" |
      "var x; while c() do x := 1; end f(x);",
      "var x; while c() do x := 1; end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,empty); [(x,none)]*" |
      "var x; while c() do dummy(); end f(x);",
      "var x; while c() do dummy(); end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,empty); [(x,undef)]*" |
      "var x; var y; while c() do x := y; end f(x);",
      "var x; var y; while c() do x := y; end f(x);"
    )

/////// basic in iteration

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,a)]*" |
      "var x; x := 1; while c() do f(x); x := 1; f(x); end",
      "var x; x := 1; while c() do f(1); x := 1; f(1); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,b)]*" |
      "var x; x := 1; while c() do f(x); x := 2; f(x); end",
      "var x; x := 1; while c() do f(x); x := 2; f(2); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,none)]*" |
      "var x; x := 1; while c() do f(x); dummy(); f(x); end",
      "var x; x := 1; while c() do f(1); dummy(); f(1); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); x := y; f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := y; f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,empty); [(x,a)]*" |
      "var x; while c() do f(x); x := 1; f(x); end",
      "var x; while c() do f(x); x := 1; f(1); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,empty); [(x,none)]*" |
      "var x; while c() do f(x); dummy(); f(x); end",
      "var x; while c() do f(x); dummy(); f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,empty); [(x,undef)]*" |
      "var x; var y; while c() do f(x); x := y; f(x); end",
      "var x; var y; while c() do f(x); x := y; f(x); end"
    )

/////// (x,a) after iteration

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,a) < (x,a) + (x,a)]*" |
      "var x; x := 1; while c() do x := 1; if c() then x := 1; else x := 1; end end f(x);",
      "var x; x := 1; while c() do x := 1; if c() then x := 1; else x := 1; end end f(1);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,a) < (x,a) + (x,b)]*" |
      "var x; x := 1; while c() do x := 1; if c() then x := 1; else x := 2; end end f(x);",
      "var x; x := 1; while c() do x := 1; if c() then x := 1; else x := 2; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,a) < (x,b) + (x,a)]*" |
      "var x; x := 1; while c() do x := 1; if c() then x := 2; else x := 1; end end f(x);",
      "var x; x := 1; while c() do x := 1; if c() then x := 2; else x := 1; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,a) < (x,b) + (x,c)]*" |
      "var x; x := 1; while c() do x := 1; if c() then x := 2; else x := 3; end end f(x);",
      "var x; x := 1; while c() do x := 1; if c() then x := 2; else x := 3; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,a) < (x,a) + (x,none)]*" |
      "var x; x := 1; while c() do x := 1; if c() then x := 1; else dummy(); end end f(x);",
      "var x; x := 1; while c() do x := 1; if c() then x := 1; else dummy(); end end f(1);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,a) < (x,none) + (x,a)]*" |
      "var x; x := 1; while c() do x := 1; if c() then dummy(); else x := 1; end end f(x);",
      "var x; x := 1; while c() do x := 1; if c() then dummy(); else x := 1; end end f(1);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,a) < (x,b) + (x,none)]*" |
      "var x; x := 1; while c() do x := 1; if c() then x := 2; else dummy(); end end f(x);",
      "var x; x := 1; while c() do x := 1; if c() then x := 2; else dummy(); end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,a) < (x,none) + (x,b)]*" |
      "var x; x := 1; while c() do x := 1; if c() then dummy(); else x := 2; end end f(x);",
      "var x; x := 1; while c() do x := 1; if c() then dummy(); else x := 2; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,a) < (x,none) + (x,none)]*" |
      "var x; x := 1; while c() do x := 1; if c() then dummy(); else dummy(); end end f(x);",
      "var x; x := 1; while c() do x := 1; if c() then dummy(); else dummy(); end end f(1);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,a) < (x,a) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do x := 1; if c() then x := 1; else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do x := 1; if c() then x := 1; else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,a) < (x,undef) + (x,a)]*" |
      "var x; var y; x := 1; while c() do x := 1; if c() then x := y; else x := 1; end end f(x);",
      "var x; var y; x := 1; while c() do x := 1; if c() then x := y; else x := 1; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,a) < (x,b) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do x := 1; if c() then x := 2; else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do x := 1; if c() then x := 2; else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,a) < (x,undef) + (x,b)]*" |
      "var x; var y; x := 1; while c() do x := 1; if c() then x := y; else x := 2; end end f(x);",
      "var x; var y; x := 1; while c() do x := 1; if c() then x := y; else x := 2; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,a) < (x,undef) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do x := 1; if c() then x := y; else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do x := 1; if c() then x := y; else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,a) < (x,none) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do x := 1; if c() then dummy(); else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do x := 1; if c() then dummy(); else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,a) < (x,undef) + (x,none)]*" |
      "var x; var y; x := 1; while c() do x := 1; if c() then x := y; else dummy(); end end f(x);",
      "var x; var y; x := 1; while c() do x := 1; if c() then x := y; else dummy(); end end f(x);"
    )

/////// (x,a) in iteration

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,a) < (x,a) + (x,a)]*" |
      "var x; x := 1; while c() do f(x); x := 1; if c() then f(x); x := 1; f(x); else f(x); x := 1; f(x); end f(x); end",
      "var x; x := 1; while c() do f(1); x := 1; if c() then f(1); x := 1; f(1); else f(1); x := 1; f(1); end f(1); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,a) < (x,a) + (x,b)]*" |
      "var x; x := 1; while c() do f(x); x := 1; if c() then f(x); x := 1; f(x); else f(x); x := 2; f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 1; if c() then f(1); x := 1; f(1); else f(1); x := 2; f(2); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,a) < (x,b) + (x,a)]*" |
      "var x; x := 1; while c() do f(x); x := 1; if c() then f(x); x := 2; f(x); else f(x); x := 1; f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 1; if c() then f(1); x := 2; f(2); else f(1); x := 1; f(1); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,a) < (x,b) + (x,c)]*" |
      "var x; x := 1; while c() do f(x); x := 1; if c() then f(x); x := 2; f(x); else f(x); x := 3; f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 1; if c() then f(1); x := 2; f(2); else f(1); x := 3; f(3); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,a) < (x,a) + (x,none)]*" |
      "var x; x := 1; while c() do f(x); x := 1; if c() then f(x); x := 1; f(x); else f(x); dummy(); f(x); end f(x); end",
      "var x; x := 1; while c() do f(1); x := 1; if c() then f(1); x := 1; f(1); else f(1); dummy(); f(1); end f(1); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,a) < (x,none) + (x,a)]*" |
      "var x; x := 1; while c() do f(x); x := 1; if c() then f(x); dummy(); f(x); else f(x); x := 1; f(x); end f(x); end",
      "var x; x := 1; while c() do f(1); x := 1; if c() then f(1); dummy(); f(1); else f(1); x := 1; f(1); end f(1); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,a) < (x,b) + (x,none)]*" |
      "var x; x := 1; while c() do f(x); x := 1; if c() then f(x); x := 2; f(x); else f(x); dummy(); f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 1; if c() then f(1); x := 2; f(2); else f(1); dummy(); f(1); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,a) < (x,none) + (x,b)]*" |
      "var x; x := 1; while c() do f(x); x := 1; if c() then f(x); dummy(); f(x); else f(x); x := 2; f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 1; if c() then f(1); dummy(); f(1); else f(1); x := 2; f(2); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,a) < (x,none) + (x,none)]*" |
      "var x; x := 1; while c() do f(x); x := 1; if c() then f(x); dummy(); f(x); else f(x); dummy(); f(x); end f(x); end",
      "var x; x := 1; while c() do f(1); x := 1; if c() then f(1); dummy(); f(1); else f(1); dummy(); f(1); end f(1); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,a) < (x,a) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 1; if c() then f(x); x := 1; f(x); else f(x); x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 1; if c() then f(1); x := 1; f(1); else f(1); x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,a) < (x,undef) + (x,a)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 1; if c() then f(x); x := y; f(x); else f(x); x := 1; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 1; if c() then f(1); x := y; f(x); else f(1); x := 1; f(1); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,a) < (x,b) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 1; if c() then f(x); x := 2; f(x); else f(x); x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 1; if c() then f(1); x := 2; f(2); else f(1); x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,a) < (x,undef) + (x,b)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 1; if c() then f(x); x := y; f(x); else f(x); x := 2; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 1; if c() then f(1); x := y; f(x); else f(1); x := 2; f(2); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,a) < (x,undef) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 1; if c() then f(x); x := y; f(x); else f(x); x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 1; if c() then f(1); x := y; f(x); else f(1); x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,a) < (x,none) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 1; if c() then f(x); dummy(); f(x); else f(x); x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 1; if c() then f(1); dummy(); f(1); else f(1); x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,a) < (x,undef) + (x,none)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 1; if c() then f(x); x := y; f(x); else f(x); dummy(); f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 1; if c() then f(1); x := y; f(x); else f(1); dummy(); f(1); end f(x); end"
    )

/////// (x,b) after iteration

    // mark 3
  ; apply-propconst-test(!"Check rule set after (x,a); [(x,b) < (x,a) + (x,a)]*" |
      "var x; x := 1; while c() do x := 2; if c() then x := 1; else x := 1; end end f(x);",
      "var x; x := 1; while c() do x := 2; if c() then x := 1; else x := 1; end end f(1);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,b) < (x,a) + (x,b)]*" |
      "var x; x := 1; while c() do x := 2; if c() then x := 1; else x := 2; end end f(x);",
      "var x; x := 1; while c() do x := 2; if c() then x := 1; else x := 2; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,b) < (x,b) + (x,a)]*" |
      "var x; x := 1; while c() do x := 2; if c() then x := 2; else x := 1; end end f(x);",
      "var x; x := 1; while c() do x := 2; if c() then x := 2; else x := 1; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,b) < (x,b) + (x,c)]*" |
      "var x; x := 1; while c() do x := 2; if c() then x := 2; else x := 3; end end f(x);",
      "var x; x := 1; while c() do x := 2; if c() then x := 2; else x := 3; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,b) < (x,a) + (x,none)]*" |
      "var x; x := 1; while c() do x := 2; if c() then x := 1; else dummy(); end end f(x);",
      "var x; x := 1; while c() do x := 2; if c() then x := 1; else dummy(); end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,b) < (x,none) + (x,a)]*" |
      "var x; x := 1; while c() do x := 2; if c() then dummy(); else x := 1; end end f(x);",
      "var x; x := 1; while c() do x := 2; if c() then dummy(); else x := 1; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,b) < (x,b) + (x,none)]*" |
      "var x; x := 1; while c() do x := 2; if c() then x := 2; else dummy(); end end f(x);",
      "var x; x := 1; while c() do x := 2; if c() then x := 2; else dummy(); end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,b) < (x,none) + (x,b)]*" |
      "var x; x := 1; while c() do x := 2; if c() then dummy(); else x := 2; end end f(x);",
      "var x; x := 1; while c() do x := 2; if c() then dummy(); else x := 2; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,b) < (x,none) + (x,none)]*" |
      "var x; x := 1; while c() do x := 2; if c() then dummy(); else dummy(); end end f(x);",
      "var x; x := 1; while c() do x := 2; if c() then dummy(); else dummy(); end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,b) < (x,a) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do x := 2; if c() then x := 1; else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do x := 2; if c() then x := 1; else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,b) < (x,undef) + (x,a)]*" |
      "var x; var y; x := 1; while c() do x := 2; if c() then x := y; else x := 1; end end f(x);",
      "var x; var y; x := 1; while c() do x := 2; if c() then x := y; else x := 1; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,b) < (x,b) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do x := 2; if c() then x := 2; else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do x := 2; if c() then x := 2; else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,b) < (x,undef) + (x,b)]*" |
      "var x; var y; x := 1; while c() do x := 2; if c() then x := y; else x := 2; end end f(x);",
      "var x; var y; x := 1; while c() do x := 2; if c() then x := y; else x := 2; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,b) < (x,undef) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do x := 2; if c() then x := y; else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do x := 2; if c() then x := y; else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,b) < (x,none) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do x := 2; if c() then dummy(); else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do x := 2; if c() then dummy(); else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,b) < (x,undef) + (x,none)]*" |
      "var x; var y; x := 1; while c() do x := 2; if c() then x := y; else dummy(); end end f(x);",
      "var x; var y; x := 1; while c() do x := 2; if c() then x := y; else dummy(); end end f(x);"
    )

/////// (x,b) in iteration

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,b) < (x,a) + (x,a)]*" |
      "var x; x := 1; while c() do f(x); x := 2; if c() then f(x); x := 1; f(x); else f(x); x := 1; f(x); end f(x); end",
      "var x; x := 1; while c() do f(1); x := 2; if c() then f(2); x := 1; f(1); else f(2); x := 1; f(1); end f(1); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,b) < (x,a) + (x,b)]*" |
      "var x; x := 1; while c() do f(x); x := 2; if c() then f(x); x := 1; f(x); else f(x); x := 2; f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 2; if c() then f(2); x := 1; f(1); else f(2); x := 2; f(2); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,b) < (x,b) + (x,a)]*" |
      "var x; x := 1; while c() do f(x); x := 2; if c() then f(x); x := 2; f(x); else f(x); x := 1; f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 2; if c() then f(2); x := 2; f(2); else f(2); x := 1; f(1); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,b) < (x,b) + (x,c)]*" |
      "var x; x := 1; while c() do f(x); x := 2; if c() then f(x); x := 2; f(x); else f(x); x := 3; f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 2; if c() then f(2); x := 2; f(2); else f(2); x := 3; f(3); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,b) < (x,a) + (x,none)]*" |
      "var x; x := 1; while c() do f(x); x := 2; if c() then f(x); x := 1; f(x); else f(x); dummy(); f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 2; if c() then f(2); x := 1; f(1); else f(2); dummy(); f(2); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,b) < (x,none) + (x,a)]*" |
      "var x; x := 1; while c() do f(x); x := 2; if c() then f(x); dummy(); f(x); else f(x); x := 1; f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 2; if c() then f(2); dummy(); f(2); else f(2); x := 1; f(1); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,b) < (x,b) + (x,none)]*" |
      "var x; x := 1; while c() do f(x); x := 2; if c() then f(x); x := 2; f(x); else f(x); dummy(); f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 2; if c() then f(2); x := 2; f(2); else f(2); dummy(); f(2); end f(2); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,b) < (x,none) + (x,b)]*" |
      "var x; x := 1; while c() do f(x); x := 2; if c() then f(x); dummy(); f(x); else f(x); x := 2; f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 2; if c() then f(2); dummy(); f(2); else f(2); x := 2; f(2); end f(2); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,b) < (x,none) + (x,none)]*" |
      "var x; x := 1; while c() do f(x); x := 2; if c() then f(x); dummy(); f(x); else f(x); dummy(); f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 2; if c() then f(2); dummy(); f(2); else f(2); dummy(); f(2); end f(2); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,b) < (x,a) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 2; if c() then f(x); x := 1; f(x); else f(x); x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 2; if c() then f(2); x := 1; f(1); else f(2); x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,b) < (x,undef) + (x,a)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 2; if c() then f(x); x := y; f(x); else f(x); x := 1; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 2; if c() then f(2); x := y; f(x); else f(2); x := 1; f(1); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,b) < (x,b) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 2; if c() then f(x); x := 2; f(x); else f(x); x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 2; if c() then f(2); x := 2; f(2); else f(2); x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,b) < (x,undef) + (x,b)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 2; if c() then f(x); x := y; f(x); else f(x); x := 2; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 2; if c() then f(2); x := y; f(x); else f(2); x := 2; f(2); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,b) < (x,undef) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 2; if c() then f(x); x := y; f(x); else f(x); x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 2; if c() then f(2); x := y; f(x); else f(2); x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,b) < (x,none) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 2; if c() then f(x); dummy(); f(x); else f(x); x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 2; if c() then f(2); dummy(); f(2); else f(2); x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,b) < (x,undef) + (x,none)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 2; if c() then f(x); x := y; f(x); else f(x); dummy(); f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 2; if c() then f(2); x := y; f(x); else f(2); dummy(); f(2); end f(x); end"
    )

/////// (x,d) after iteration

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,d) < (x,a) + (x,a)]*" |
      "var x; x := 1; while c() do x := 4; if c() then x := 1; else x := 1; end end f(x);",
      "var x; x := 1; while c() do x := 4; if c() then x := 1; else x := 1; end end f(1);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,d) < (x,a) + (x,b)]*" |
      "var x; x := 1; while c() do x := 4; if c() then x := 1; else x := 2; end end f(x);",
      "var x; x := 1; while c() do x := 4; if c() then x := 1; else x := 2; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,d) < (x,b) + (x,a)]*" |
      "var x; x := 1; while c() do x := 4; if c() then x := 2; else x := 1; end end f(x);",
      "var x; x := 1; while c() do x := 4; if c() then x := 2; else x := 1; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,d) < (x,b) + (x,c)]*" |
      "var x; x := 1; while c() do x := 4; if c() then x := 2; else x := 3; end end f(x);",
      "var x; x := 1; while c() do x := 4; if c() then x := 2; else x := 3; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,c) < (x,b) + (x,c)]*" |
      "var x; x := 1; while c() do x := 3; if c() then x := 2; else x := 3; end end f(x);",
      "var x; x := 1; while c() do x := 3; if c() then x := 2; else x := 3; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,d) < (x,a) + (x,none)]*" |
      "var x; x := 1; while c() do x := 4; if c() then x := 1; else dummy(); end end f(x);",
      "var x; x := 1; while c() do x := 4; if c() then x := 1; else dummy(); end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,d) < (x,none) + (x,a)]*" |
      "var x; x := 1; while c() do x := 4; if c() then dummy(); else x := 1; end end f(x);",
      "var x; x := 1; while c() do x := 4; if c() then dummy(); else x := 1; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,d) < (x,b) + (x,none)]*" |
      "var x; x := 1; while c() do x := 4; if c() then x := 2; else dummy(); end end f(x);",
      "var x; x := 1; while c() do x := 4; if c() then x := 2; else dummy(); end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,d) < (x,none) + (x,b)]*" |
      "var x; x := 1; while c() do x := 4; if c() then dummy(); else x := 2; end end f(x);",
      "var x; x := 1; while c() do x := 4; if c() then dummy(); else x := 2; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,d) < (x,none) + (x,none)]*" |
      "var x; x := 1; while c() do x := 4; if c() then dummy(); else dummy(); end end f(x);",
      "var x; x := 1; while c() do x := 4; if c() then dummy(); else dummy(); end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,d) < (x,a) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do x := 4; if c() then x := 1; else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do x := 4; if c() then x := 1; else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,d) < (x,undef) + (x,a)]*" |
      "var x; var y; x := 1; while c() do x := 4; if c() then x := y; else x := 1; end end f(x);",
      "var x; var y; x := 1; while c() do x := 4; if c() then x := y; else x := 1; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,d) < (x,b) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do x := 4; if c() then x := 2; else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do x := 4; if c() then x := 2; else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,d) < (x,undef) + (x,b)]*" |
      "var x; var y; x := 1; while c() do x := 4; if c() then x := y; else x := 2; end end f(x);",
      "var x; var y; x := 1; while c() do x := 4; if c() then x := y; else x := 2; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,d) < (x,undef) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do x := 4; if c() then x := y; else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do x := 4; if c() then x := y; else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,d) < (x,none) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do x := 4; if c() then dummy(); else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do x := 4; if c() then dummy(); else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,d) < (x,undef) + (x,none)]*" |
      "var x; var y; x := 1; while c() do x := 4; if c() then x := y; else dummy(); end end f(x);",
      "var x; var y; x := 1; while c() do x := 4; if c() then x := y; else dummy(); end end f(x);"
    )

 /// (x,d) in iteration

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,d) < (x,a) + (x,a)]*" |
      "var x; x := 1; while c() do f(x); x := 4; if c() then f(x); x := 1; f(x); else f(x); x := 1; f(x); end f(x); end",
      "var x; x := 1; while c() do f(1); x := 4; if c() then f(4); x := 1; f(1); else f(4); x := 1; f(1); end f(1); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,d) < (x,a) + (x,b)]*" |
      "var x; x := 1; while c() do f(x); x := 4; if c() then f(x); x := 1; f(x); else f(x); x := 2; f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 4; if c() then f(4); x := 1; f(1); else f(4); x := 2; f(2); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,d) < (x,b) + (x,a)]*" |
      "var x; x := 1; while c() do f(x); x := 4; if c() then f(x); x := 2; f(x); else f(x); x := 1; f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 4; if c() then f(4); x := 2; f(2); else f(4); x := 1; f(1); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,d) < (x,b) + (x,c)]*" |
      "var x; x := 1; while c() do f(x); x := 4; if c() then f(x); x := 2; f(x); else f(x); x := 3; f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 4; if c() then f(4); x := 2; f(2); else f(4); x := 3; f(3); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,c) < (x,b) + (x,c)]*" |
      "var x; x := 1; while c() do f(x); x := 3; if c() then f(x); x := 2; f(x); else f(x); x := 3; f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 3; if c() then f(3); x := 2; f(2); else f(3); x := 3; f(3); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,d) < (x,a) + (x,none)]*" |
      "var x; x := 1; while c() do f(x); x := 4; if c() then f(x); x := 1; f(x); else f(x); dummy(); f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 4; if c() then f(4); x := 1; f(1); else f(4); dummy(); f(4); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,d) < (x,none) + (x,a)]*" |
      "var x; x := 1; while c() do f(x); x := 4; if c() then f(x); dummy(); f(x); else f(x); x := 1; f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 4; if c() then f(4); dummy(); f(4); else f(4); x := 1; f(1); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,d) < (x,b) + (x,none)]*" |
      "var x; x := 1; while c() do f(x); x := 4; if c() then f(x); x := 2; f(x); else f(x); dummy(); f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 4; if c() then f(4); x := 2; f(2); else f(4); dummy(); f(4); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,d) < (x,none) + (x,b)]*" |
      "var x; x := 1; while c() do f(x); x := 4; if c() then f(x); dummy(); f(x); else f(x); x := 2; f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 4; if c() then f(4); dummy(); f(4); else f(4); x := 2; f(2); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,d) < (x,none) + (x,none)]*" |
      "var x; x := 1; while c() do f(x); x := 4; if c() then f(x); dummy(); f(x); else f(x); dummy(); f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); x := 4; if c() then f(4); dummy(); f(4); else f(4); dummy(); f(4); end f(4); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,d) < (x,a) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 4; if c() then f(x); x := 1; f(x); else f(x); x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 4; if c() then f(4); x := 1; f(1); else f(4); x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,d) < (x,undef) + (x,a)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 4; if c() then f(x); x := y; f(x); else f(x); x := 1; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 4; if c() then f(4); x := y; f(x); else f(4); x := 1; f(1); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,d) < (x,b) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 4; if c() then f(x); x := 2; f(x); else f(x); x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 4; if c() then f(4); x := 2; f(2); else f(4); x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,d) < (x,undef) + (x,b)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 4; if c() then f(x); x := y; f(x); else f(x); x := 2; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 4; if c() then f(4); x := y; f(x); else f(4); x := 2; f(2); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,d) < (x,undef) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 4; if c() then f(x); x := y; f(x); else f(x); x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 4; if c() then f(4); x := y; f(x); else f(4); x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,d) < (x,none) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 4; if c() then f(x); dummy(); f(x); else f(x); x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 4; if c() then f(4); dummy(); f(4); else f(4); x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,d) < (x,undef) + (x,none)]*" |
      "var x; var y; x := 1; while c() do f(x); x := 4; if c() then f(x); x := y; f(x); else f(x); dummy(); f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := 4; if c() then f(4); x := y; f(x); else f(4); dummy(); f(4); end f(x); end"
    )

/////// (x,none) after iteration

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,none) < (x,a) + (x,a)]*" |
      "var x; x := 1; while c() do if c() then x := 1; else x := 1; end end f(x);",
      "var x; x := 1; while c() do if c() then x := 1; else x := 1; end end f(1);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,none) < (x,a) + (x,b)]*" |
      "var x; x := 1; while c() do if c() then x := 1; else x := 2; end end f(x);",
      "var x; x := 1; while c() do if c() then x := 1; else x := 2; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,none) < (x,b) + (x,a)]*" |
      "var x; x := 1; while c() do if c() then x := 2; else x := 1; end end f(x);",
      "var x; x := 1; while c() do if c() then x := 2; else x := 1; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,none) < (x,b) + (x,c)]*" |
      "var x; x := 1; while c() do if c() then x := 2; else x := 3; end end f(x);",
      "var x; x := 1; while c() do if c() then x := 2; else x := 3; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,none) < (x,a) + (x,none)]*" |
      "var x; x := 1; while c() do if c() then x := 1; else dummy(); end end f(x);",
      "var x; x := 1; while c() do if c() then x := 1; else dummy(); end end f(1);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,none) < (x,none) + (x,a)]*" |
      "var x; x := 1; while c() do if c() then dummy(); else x := 1; end end f(x);",
      "var x; x := 1; while c() do if c() then dummy(); else x := 1; end end f(1);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,none) < (x,b) + (x,none)]*" |
      "var x; x := 1; while c() do if c() then x := 2; else dummy(); end end f(x);",
      "var x; x := 1; while c() do if c() then x := 2; else dummy(); end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,none) < (x,none) + (x,b)]*" |
      "var x; x := 1; while c() do if c() then dummy(); else x := 2; end end f(x);",
      "var x; x := 1; while c() do if c() then dummy(); else x := 2; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,none) < (x,none) + (x,none)]*" |
      "var x; x := 1; while c() do if c() then dummy(); else dummy(); end end f(x);",
      "var x; x := 1; while c() do if c() then dummy(); else dummy(); end end f(1);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,none) < (x,a) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do if c() then x := 1; else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do if c() then x := 1; else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,none) < (x,undef) + (x,a)]*" |
      "var x; var y; x := 1; while c() do if c() then x := y; else x := 1; end end f(x);",
      "var x; var y; x := 1; while c() do if c() then x := y; else x := 1; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,none) < (x,b) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do if c() then x := 2; else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do if c() then x := 2; else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,none) < (x,undef) + (x,b)]*" |
      "var x; var y; x := 1; while c() do if c() then x := y; else x := 2; end end f(x);",
      "var x; var y; x := 1; while c() do if c() then x := y; else x := 2; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,none) < (x,undef) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do if c() then x := y; else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do if c() then x := y; else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,none) < (x,none) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do if c() then dummy(); else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do if c() then dummy(); else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,none) < (x,undef) + (x,none)]*" |
      "var x; var y; x := 1; while c() do if c() then x := y; else dummy(); end end f(x);",
      "var x; var y; x := 1; while c() do if c() then x := y; else dummy(); end end f(x);"
    )

/////// (x,none) in iteration

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,none) < (x,a) + (x,a)]*" |
      "var x; x := 1; while c() do f(x); if c() then x := 1; f(x); else x := 1; f(x); end f(x); end",
      "var x; x := 1; while c() do f(1); if c() then x := 1; f(1); else x := 1; f(1); end f(1); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,none) < (x,a) + (x,b)]*" |
      "var x; x := 1; while c() do f(x); if c() then x := 1; f(x); else x := 2; f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); if c() then x := 1; f(1); else x := 2; f(2); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,none) < (x,b) + (x,a)]*" |
      "var x; x := 1; while c() do f(x); if c() then x := 2; f(x); else x := 1; f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); if c() then x := 2; f(2); else x := 1; f(1); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,none) < (x,b) + (x,c)]*" |
      "var x; x := 1; while c() do f(x); if c() then x := 2; f(x); else x := 3; f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); if c() then x := 2; f(2); else x := 3; f(3); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,none) < (x,a) + (x,none)]*" |
      "var x; x := 1; while c() do f(x); if c() then x := 1; f(x); else dummy(); f(x); end f(x); end",
      "var x; x := 1; while c() do f(1); if c() then x := 1; f(1); else dummy(); f(1); end f(1); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,none) < (x,none) + (x,a)]*" |
      "var x; x := 1; while c() do f(x); if c() then dummy(); f(x); else x := 1; f(x); end f(x); end",
      "var x; x := 1; while c() do f(1); if c() then dummy(); f(1); else x := 1; f(1); end f(1); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,none) < (x,b) + (x,none)]*" |
      "var x; x := 1; while c() do f(x); if c() then x := 2; f(x); else dummy(); f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); if c() then x := 2; f(2); else dummy(); f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,none) < (x,none) + (x,b)]*" |
      "var x; x := 1; while c() do f(x); if c() then dummy(); f(x); else x := 2; f(x); end f(x); end",
      "var x; x := 1; while c() do f(x); if c() then dummy(); f(x); else x := 2; f(2); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,none) < (x,none) + (x,none)]*" |
      "var x; x := 1; while c() do f(x); if c() then dummy(); f(x); else dummy(); f(x); end f(x); end",
      "var x; x := 1; while c() do f(1); if c() then dummy(); f(1); else dummy(); f(1); end f(1); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,none) < (x,a) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); if c() then x := 1; f(x); else x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); if c() then x := 1; f(1); else x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,none) < (x,undef) + (x,a)]*" |
      "var x; var y; x := 1; while c() do f(x); if c() then x := y; f(x); else x := 1; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); if c() then x := y; f(x); else x := 1; f(1); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,none) < (x,b) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); if c() then x := 2; f(x); else x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); if c() then x := 2; f(2); else x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,none) < (x,undef) + (x,b)]*" |
      "var x; var y; x := 1; while c() do f(x); if c() then x := y; f(x); else x := 2; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); if c() then x := y; f(x); else x := 2; f(2); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,none) < (x,undef) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); if c() then x := y; f(x); else x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); if c() then x := y; f(x); else x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,none) < (x,none) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); if c() then dummy(); f(x); else x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); if c() then dummy(); f(x); else x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,none) < (x,undef) + (x,none)]*" |
      "var x; var y; x := 1; while c() do f(x); if c() then x := y; f(x); else dummy(); f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); if c() then x := y; f(x); else dummy(); f(x); end f(x); end"
    )

/////// (x,undef) after iteration

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,undef) < (x,a) + (x,a)]*" |
      "var x; var y; x := 1; while c() do x := y; if c() then x := 1; else x := 1; end end f(x);",
      "var x; var y; x := 1; while c() do x := y; if c() then x := 1; else x := 1; end end f(1);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,undef) < (x,a) + (x,b)]*" |
      "var x; var y; x := 1; while c() do x := y; if c() then x := 1; else x := 2; end end f(x);",
      "var x; var y; x := 1; while c() do x := y; if c() then x := 1; else x := 2; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,undef) < (x,b) + (x,a)]*" |
      "var x; var y; x := 1; while c() do x := y; if c() then x := 2; else x := 1; end end f(x);",
      "var x; var y; x := 1; while c() do x := y; if c() then x := 2; else x := 1; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,undef) < (x,b) + (x,c)]*" |
      "var x; var y; x := 1; while c() do x := y; if c() then x := 2; else x := 3; end end f(x);",
      "var x; var y; x := 1; while c() do x := y; if c() then x := 2; else x := 3; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,undef) < (x,a) + (x,none)]*" |
      "var x; var y; x := 1; while c() do x := y; if c() then x := 1; else dummy(); end end f(x);",
      "var x; var y; x := 1; while c() do x := y; if c() then x := 1; else dummy(); end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,undef) < (x,none) + (x,a)]*" |
      "var x; var y; x := 1; while c() do x := y; if c() then dummy(); else x := 1; end end f(x);",
      "var x; var y; x := 1; while c() do x := y; if c() then dummy(); else x := 1; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,undef) < (x,b) + (x,none)]*" |
      "var x; var y; x := 1; while c() do x := y; if c() then x := 2; else dummy(); end end f(x);",
      "var x; var y; x := 1; while c() do x := y; if c() then x := 2; else dummy(); end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,undef) < (x,none) + (x,b)]*" |
      "var x; var y; x := 1; while c() do x := y; if c() then dummy(); else x := 2; end end f(x);",
      "var x; var y; x := 1; while c() do x := y; if c() then dummy(); else x := 2; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,undef) < (x,none) + (x,none)]*" |
      "var x; var y; x := 1; while c() do x := y; if c() then dummy(); else dummy(); end end f(x);",
      "var x; var y; x := 1; while c() do x := y; if c() then dummy(); else dummy(); end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,undef) < (x,a) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do x := y; if c() then x := 1; else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do x := y; if c() then x := 1; else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,undef) < (x,undef) + (x,a)]*" |
      "var x; var y; x := 1; while c() do x := y; if c() then x := y; else x := 1; end end f(x);",
      "var x; var y; x := 1; while c() do x := y; if c() then x := y; else x := 1; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,undef) < (x,b) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do x := y; if c() then x := 2; else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do x := y; if c() then x := 2; else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,undef) < (x,undef) + (x,b)]*" |
      "var x; var y; x := 1; while c() do x := y; if c() then x := y; else x := 2; end end f(x);",
      "var x; var y; x := 1; while c() do x := y; if c() then x := y; else x := 2; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,undef) < (x,undef) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do x := y; if c() then x := y; else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do x := y; if c() then x := y; else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,undef) < (x,none) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do x := y; if c() then dummy(); else x := y; end end f(x);",
      "var x; var y; x := 1; while c() do x := y; if c() then dummy(); else x := y; end end f(x);"
    )

  ; apply-propconst-test(!"Check rule set after (x,a); [(x,undef) < (x,undef) + (x,none)]*" |
      "var x; var y; x := 1; while c() do x := y; if c() then x := y; else dummy(); end end f(x);",
      "var x; var y; x := 1; while c() do x := y; if c() then x := y; else dummy(); end end f(x);"
    )

/////// (x,undef) in iteration

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,undef) < (x,a) + (x,a)]*" |
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := 1; f(x); else f(x); x := 1; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(1); x := y; if c() then f(x); x := 1; f(1); else f(x); x := 1; f(1); end f(1); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,undef) < (x,a) + (x,b)]*" |
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := 1; f(x); else f(x); x := 2; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := 1; f(1); else f(x); x := 2; f(2); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,undef) < (x,b) + (x,a)]*" |
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := 2; f(x); else f(x); x := 1; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := 2; f(2); else f(x); x := 1; f(1); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,undef) < (x,b) + (x,c)]*" |
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := 2; f(x); else f(x); x := 3; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := 2; f(2); else f(x); x := 3; f(3); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,undef) < (x,a) + (x,none)]*" |
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := 1; f(x); else f(x); dummy(); f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := 1; f(1); else f(x); dummy(); f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,undef) < (x,none) + (x,a)]*" |
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); dummy(); f(x); else f(x); x := 1; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); dummy(); f(x); else f(x); x := 1; f(1); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,undef) < (x,b) + (x,none)]*" |
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := 2; f(x); else f(x); dummy(); f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := 2; f(2); else f(x); dummy(); f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,undef) < (x,none) + (x,b)]*" |
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); dummy(); f(x); else f(x); x := 2; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); dummy(); f(x); else f(x); x := 2; f(2); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,undef) < (x,none) + (x,none)]*" |
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); dummy(); f(x); else f(x); dummy(); f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); dummy(); f(x); else f(x); dummy(); f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,undef) < (x,a) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := 1; f(x); else f(x); x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := 1; f(1); else f(x); x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,undef) < (x,undef) + (x,a)]*" |
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := y; f(x); else f(x); x := 1; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := y; f(x); else f(x); x := 1; f(1); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,undef) < (x,b) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := 2; f(x); else f(x); x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := 2; f(2); else f(x); x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,undef) < (x,undef) + (x,b)]*" |
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := y; f(x); else f(x); x := 2; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := y; f(x); else f(x); x := 2; f(2); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,undef) < (x,undef) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := y; f(x); else f(x); x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := y; f(x); else f(x); x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,undef) < (x,none) + (x,undef)]*" |
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); dummy(); f(x); else f(x); x := y; f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); dummy(); f(x); else f(x); x := y; f(x); end f(x); end"
    )

  ; apply-propconst-test(!"Check rule set in iteration (x,a); [(x,undef) < (x,undef) + (x,none)]*" |
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := y; f(x); else f(x); dummy(); f(x); end f(x); end",
      "var x; var y; x := 1; while c() do f(x); x := y; if c() then f(x); x := y; f(x); else f(x); dummy(); f(x); end f(x); end"
    )

/////// non-structured tests

  ; apply-propconst-test(!"Check complex fix-and-intersect scenario #1" |
      "var x; x := 0;
       while c() do
         if c() then
           if c() then x := 0;
           else        x := 0;
           end
           f(x);
         else
           if c() then x := 0;
           else        x := 0;
           end
           f(x);
         end
         f(x);
       end
       f(x);",
      "var x; x := 0;
       while c() do
         if c() then
           if c() then x := 0;
           else        x := 0;
           end
           f(0);
         else
           if c() then x := 0;
           else        x := 0;
           end
           f(0);
         end
         f(0);
       end
       f(0);"
    )

  ; apply-propconst-test(!"Check complex fix-and-intersect scenario #2" |
      "var x; x := 0;
       while c() do
         if c() then
           if c() then x := 1;
           else        x := 1;
           end
           f(x);
         else
           if c() then x := 1;
           else        x := 1;
           end
           f(x);
         end
         f(x);
       end
       f(x);",
      "var x; x := 0;
       while c() do
         if c() then
           if c() then x := 1;
           else        x := 1;
           end
           f(1);
         else
           if c() then x := 1;
           else        x := 1;
           end
           f(1);
         end
         f(1);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check complex fix-and-intersect scenario #3" |
      "var x; x := 0;
       while c() do
         f(x); x := 1;
         if c() then
           if c() then x := 0;
           else        x := 0;
           end
           f(x);
         else
           if c() then x := 2;
           else        x := 2;
           end
           f(x); x := 0;
         end
         f(x);
       end
       f(x);",
      "var x; x := 0;
       while c() do
         f(0); x := 1;
         if c() then
           if c() then x := 0;
           else        x := 0;
           end
           f(0);
         else
           if c() then x := 2;
           else        x := 2;
           end
           f(2); x := 0;
         end
         f(0);
       end
       f(0);"
    )

  ; apply-propconst-test(!"Check complex fix-and-intersect scenario #4" |
      "var x; x := 0;
       while c() do
         x := 1;
         while c() do x := 1; end
         f(x); x := 0;
       end
       f(x);",
      "var x; x := 0;
       while c() do
         x := 1;
         while c() do x := 1; end
         f(1); x := 0;
       end
       f(0);"
    )

  ; apply-propconst-test(!"Check complex fix-and-intersect scenario #5" |
      "var x; x := 0;
       while c() do
         x := 1;
         while c() do x := 0; end
         f(x); x := 0;
       end
       f(x);",
      "var x; x := 0;
       while c() do
         x := 1;
         while c() do x := 0; end
         f(x); x := 0;
       end
       f(0);"
    )

  ; apply-propconst-test(!"Check complex fix-and-intersect scenario #6" |
      "var x; x := 0;
       while c() do
         if c() then
           x := 2;
           while c() do x := 0; f(x); end
           f(x); x := 1;
         else
           while c() do x := 0; f(x); end
           f(x); x := 1;
         end
         f(x); x := 0;
       end
       f(x);",
      "var x; x := 0;
       while c() do
         if c() then
           x := 2;
           while c() do x := 0; f(0); end
           f(x); x := 1;
         else
           while c() do x := 0; f(0); end
           f(0); x := 1;
         end
         f(1); x := 0;
       end
       f(0);"
    )

  ; apply-propconst-test(!"Check complex fix-and-intersect scenario #7" |
      "var x; var y; x := 0;
       while c() do
         if c() then
           x := y;
           while c() do x := 1; f(x); end
           f(x); x := 0;
         else
           while c() do dummy(); end
           f(x); x := 1;
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 0;
       while c() do
         if c() then
           x := y;
           while c() do x := 1; f(1); end
           f(x); x := 0;
         else
           while c() do dummy(); end
           f(x); x := 1;
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check complex fix-and-intersect scenario #8" |
      "var x; var y; x := 0;
       while c() do
         if c() then
           while c() do dummy(); f(x); end
           f(x); x := 0;
         else
           x := 0;
           while c() do x := y; f(x); end
           f(x); x := 1;
         end
         f(x); x := 0;
       end
       f(x);",
      "var x; var y; x := 0;
       while c() do
         if c() then
           while c() do dummy(); f(0); end
           f(0); x := 0;
         else
           x := 0;
           while c() do x := y; f(x); end
           f(x); x := 1;
         end
         f(x); x := 0;
       end
       f(0);"
    )

  ; apply-propconst-test(!"Check complex fix-and-intersect scenario #9" |
      "var x; var y; x := 0;
       while c() do
         f(x); x := 1;
         if c() then x := 1;
         else
           while c() do
             f(x); if c() then x := 1; end
           end
           f(x);
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 0;
       while c() do
         f(x); x := 1;
         if c() then x := 1;
         else
           while c() do
             f(1); if c() then x := 1; end
           end
           f(1);
         end
         f(1);
       end
       f(x);"
    )

  pc-break-tests = id

/////// non-structured tests

  ; apply-propconst-test(!"Check breaking out of iterative statement #1" |
      "var x;
       x := 1;
       while c() do
         if c() then x := 2; break; end
         x := 1;
       end
       f(x);",
      "var x;
       x := 1;
       while c() do
         if c() then x := 2; break; end
         x := 1;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #2" |
      "var x; x := 1; while c() do f(x); break; x := 2; end f(x);",
      "var x; x := 1; while c() do f(1); break; x := 2; end f(1);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #3" |
      "var x; x := 1;
       while c() do
         if c() then x := 1; break; end
         f(x);
         if c() then x := 1; break;
         else
           x := 1;
           if c() then x := 3; else dummy(); break; f(x); end
           f(x);
         end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       while c() do
         if c() then x := 1; break; end
         f(1);
         if c() then x := 1; break;
         else
           x := 1;
           if c() then x := 3; else dummy(); break; f(1); end
           f(3);
         end
         f(3); x := 1;
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #4" |
      "var x; x := 1;
       while c() do
         if c() then x := 1; break; end
         f(x);
         if c() then x := 1; break;
         else
           x := 1;
           if c() then x := 3; else x := 2; break; f(x); end
           f(x);
         end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       while c() do
         if c() then x := 1; break; end
         f(1);
         if c() then x := 1; break;
         else
           x := 1;
           if c() then x := 3; else x := 2; break; f(2); end
           f(3);
         end
         f(3); x := 1;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #5" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; break; else x := 3; end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(1);
         if c() then x := 2; break; else x := 3; end
         f(3); x := 1;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #6" |
      "var x; var y; x := 1; y := 1;
       while c() do
         f(x,y);
         if c() then y := 1; break; end
         f(x,y);
         if c() then x := 1; break; else x := 1; break; end
         if c() then y := 3; else y := 2; end
       end
       f(x,y);",
      "var x; var y; x := 1; y := 1;
       while c() do
         f(1,1);
         if c() then y := 1; break; end
         f(1,1);
         if c() then x := 1; break; else x := 1; break; end
         if c() then y := 3; else y := 2; end
       end
       f(1,1);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #7" |
      "var x; var y; x := 1; y := 1;
       while c() do
         f(x,y);
         if c() then y := 1; break; end
         f(x,y);
         if c() then x := 1; break; else x := 1; end
         if c() then y := 3; else y := 2; end
       end
       f(x,y);",
      "var x; var y; x := 1; y := 1;
       while c() do
         f(1,y);
         if c() then y := 1; break; end
         f(1,y);
         if c() then x := 1; break; else x := 1; end
         if c() then y := 3; else y := 2; end
       end
       f(1,y);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #8" |
      "var x; var y; x := 1; y := 3;
       while c() do
         f(x,y);
         if c() then y := 1; x := 2; break; end
         f(x,y);
         if c() then x := 1; break; else x := 1; end
         if c() then y := 3; else y := 3; end
       end
       f(x,y);",
      "var x; var y; x := 1; y := 3;
       while c() do
         f(1,3);
         if c() then y := 1; x := 2; break; end
         f(1,3);
         if c() then x := 1; break; else x := 1; end
         if c() then y := 3; else y := 3; end
       end
       f(x,y);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #9" |
      "var x; var y; x := 1; y := 1;
       while c() do
         f(x,y);
         if c() then y := 1; break; end
         f(x,y);
         if c() then x := 2; break; else x := 2; end
         if c() then y := 3; else y := 2; end
       end
       f(x,y);",
      "var x; var y; x := 1; y := 1;
       while c() do
         f(x,y);
         if c() then y := 1; break; end
         f(x,y);
         if c() then x := 2; break; else x := 2; end
         if c() then y := 3; else y := 2; end
       end
       f(x,y);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #10" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; break; else x := 2; end
         if c() then x := 2; else if c() then break; else x := 2; end end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(1);
         if c() then x := 1; break; else x := 2; end
         if c() then x := 2; else if c() then break; else x := 2; end end
         f(2); x := 1;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #11" |
      "var x; x := 1;
       while c() do
         if c() then
           if c() then
             if c() then x := 1; break; else dummy(); end
           else
             if c() then dummy(); else x := 1; break; end
           end
         else
           if c() then
             if c() then dummy(); else x := 1; break; end
           else
             if c() then x := 1; break; else dummy(); end
           end
         end
       end
       f(x);",
      "var x; x := 1;
       while c() do
         if c() then
           if c() then
             if c() then x := 1; break; else dummy(); end
           else
             if c() then dummy(); else x := 1; break; end
           end
         else
           if c() then
             if c() then dummy(); else x := 1; break; end
           else
             if c() then x := 1; break; else dummy(); end
           end
         end
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #12" |
      "var x; x := 1;
       while c() do
         if c() then
           if c() then
             if c() then x := 1; break; else dummy(); end
           else
             if c() then dummy(); else x := 1; break; end
           end
         else
           if c() then
             if c() then dummy(); else x := 2; break; end
           else
             if c() then x := 1; break; else dummy(); end
           end
         end
       end
       f(x);",
      "var x; x := 1;
       while c() do
         if c() then
           if c() then
             if c() then x := 1; break; else dummy(); end
           else
             if c() then dummy(); else x := 1; break; end
           end
         else
           if c() then
             if c() then dummy(); else x := 2; break; end
           else
             if c() then x := 1; break; else dummy(); end
           end
         end
       end
       f(x);"
    )

/////// (x,a); [(x,none) < (x,?); break; + (x,?)]*

  ; apply-propconst-test(!"Check breaking out of iterative statement #13" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; break;
         else        x := 1;
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(1);
         if c() then x := 1; break;
         else        x := 1;
         end
         f(1);
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #14" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; break;
         else        x := 2;
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; break;
         else        x := 2;
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #15" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; break;
         else        x := 1;
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(1);
         if c() then x := 2; break;
         else        x := 1;
         end
         f(1);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #16" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; break;
         else        x := 2;
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; break;
         else        x := 2;
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #17" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; break;
         else        x := 3;
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; break;
         else        x := 3;
         end
         f(3);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #18" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; break;
         else        dummy();
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(1);
         if c() then x := 1; break;
         else        dummy();
         end
         f(1);
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #19" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then dummy(); break;
         else        x := 1;
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(1);
         if c() then dummy(); break;
         else        x := 1;
         end
         f(1);
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #20" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; break;
         else        dummy();
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(1);
         if c() then x := 2; break;
         else        dummy();
         end
         f(1);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #21" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then dummy(); break;
         else        x := 2;
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then dummy(); break;
         else        x := 2;
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #22" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then dummy(); break;
         else        dummy();
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(1);
         if c() then dummy(); break;
         else        dummy();
         end
         f(1);
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #23" |
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := 1; break;
         else        x := y;
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := 1; break;
         else        x := y;
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #24" |
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := y; break;
         else        x := 1;
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 1;
       while c() do
         f(1);
         if c() then x := y; break;
         else        x := 1;
         end
         f(1);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #25" |
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := 2; break;
         else        x := y;
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := 2; break;
         else        x := y;
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #26" |
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := y; break;
         else        x := 2;
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := y; break;
         else        x := 2;
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #27" |
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := y; break;
         else        x := y;
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := y; break;
         else        x := y;
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #28" |
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then dummy(); break;
         else        x := y;
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then dummy(); break;
         else        x := y;
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #29" |
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := y; break;
         else        dummy();
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 1;
       while c() do
         f(1);
         if c() then x := y; break;
         else        dummy();
         end
         f(1);
       end
       f(x);"
    )

/////// (x,empty); [(x,none) < (x,?); break; + (x,?)]*

  ; apply-propconst-test(!"Check breaking out of iterative statement #30" |
      "var x;
       while c() do
         f(x);
         if c() then x := 1; break;
         else        x := 1;
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then x := 1; break;
         else        x := 1;
         end
         f(1);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #31" |
      "var x;
       while c() do
         f(x);
         if c() then x := 1; break;
         else        x := 2;
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then x := 1; break;
         else        x := 2;
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #32" |
      "var x;
       while c() do
         f(x);
         if c() then x := 2; break;
         else        x := 1;
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then x := 2; break;
         else        x := 1;
         end
         f(1);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #33" |
      "var x;
       while c() do
         f(x);
         if c() then x := 2; break;
         else        x := 2;
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then x := 2; break;
         else        x := 2;
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #34" |
      "var x;
       while c() do
         f(x);
         if c() then x := 2; break;
         else        x := 3;
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then x := 2; break;
         else        x := 3;
         end
         f(3);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #35" |
      "var x;
       while c() do
         f(x);
         if c() then x := 1; break;
         else        dummy();
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then x := 1; break;
         else        dummy();
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #36" |
      "var x;
       while c() do
         f(x);
         if c() then dummy(); break;
         else        x := 1;
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then dummy(); break;
         else        x := 1;
         end
         f(1);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #37" |
      "var x;
       while c() do
         f(x);
         if c() then x := 2; break;
         else        dummy();
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then x := 2; break;
         else        dummy();
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #38" |
      "var x;
       while c() do
         f(x);
         if c() then dummy(); break;
         else        x := 2;
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then dummy(); break;
         else        x := 2;
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #39" |
      "var x;
       while c() do
         f(x);
         if c() then dummy(); break;
         else        dummy();
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then dummy(); break;
         else        dummy();
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #40" |
      "var x; var y;
       while c() do
         f(x);
         if c() then x := 1; break;
         else        x := y;
         end
         f(x);
       end
       f(x);",
      "var x; var y;
       while c() do
         f(x);
         if c() then x := 1; break;
         else        x := y;
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #41" |
      "var x; var y;
       while c() do
         f(x);
         if c() then x := y; break;
         else        x := 1;
         end
         f(x);
       end
       f(x);",
      "var x; var y;
       while c() do
         f(x);
         if c() then x := y; break;
         else        x := 1;
         end
         f(1);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #42" |
      "var x; var y;
       while c() do
         f(x);
         if c() then x := 2; break;
         else        x := y;
         end
         f(x);
       end
       f(x);",
      "var x; var y;
       while c() do
         f(x);
         if c() then x := 2; break;
         else        x := y;
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #43" |
      "var x; var y;
       while c() do
         f(x);
         if c() then x := y; break;
         else        x := 2;
         end
         f(x);
       end
       f(x);",
      "var x; var y;
       while c() do
         f(x);
         if c() then x := y; break;
         else        x := 2;
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #44" |
      "var x; var y;
       while c() do
         f(x);
         if c() then x := y; break;
         else        x := y;
         end
         f(x);
       end
       f(x);",
      "var x; var y;
       while c() do
         f(x);
         if c() then x := y; break;
         else        x := y;
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #45" |
      "var x; var y;
       while c() do
         f(x);
         if c() then dummy(); break;
         else        x := y;
         end
         f(x);
       end
       f(x);",
      "var x; var y;
       while c() do
         f(x);
         if c() then dummy(); break;
         else        x := y;
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #46" |
      "var x; var y;
       while c() do
         f(x);
         if c() then x := y; break;
         else        dummy();
         end
         f(x);
       end
       f(x);",
      "var x; var y;
       while c() do
         f(x);
         if c() then x := y; break;
         else        dummy();
         end
         f(x);
       end
       f(x);"
    )

/////// (x,a); [(x,none) < (x,?); break; + ((x,none) < (x,?) + (x,?); break;)]*

  ; apply-propconst-test(!"Check breaking out of iterative statement #47" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; break;
         else if c() then x := 1; else x := 1; break; end
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(1);
         if c() then x := 1; break;
         else if c() then x := 1; else x := 1; break; end
         end
         f(1);
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #48" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; break;
         else if c() then x := 1; else x := 2; break; end
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(1);
         if c() then x := 2; break;
         else if c() then x := 1; else x := 2; break; end
         end
         f(1);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #49" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; break;
         else if c() then x := 2; else x := 1; break; end
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; break;
         else if c() then x := 2; else x := 1; break; end
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #50" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; break;
         else if c() then x := 2; else x := 3; break; end
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; break;
         else if c() then x := 2; else x := 3; break; end
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #51" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; break;
         else if c() then x := 1; else x := 3; break; end
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(1);
         if c() then x := 2; break;
         else if c() then x := 1; else x := 3; break; end
         end
         f(1);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #52" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; break;
         else if c() then x := 2; else x := 2; break; end
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; break;
         else if c() then x := 2; else x := 2; break; end
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #53" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; break;
         else if c() then x := 3; else x := 4; break; end
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; break;
         else if c() then x := 3; else x := 4; break; end
         end
         f(3);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking out of iterative statement #54" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; break;
         else if c() then x := 3; else x := 2; break; end
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; break;
         else if c() then x := 3; else x := 2; break; end
         end
         f(3);
       end
       f(x);"
    )

  pc-break-to-label-tests = id

  ; apply-propconst-test(!"Check breaking to label out of iterative statement #1" |
      "var x; x := 1;
       l: while c() do
         if c() then
           x := 2;
           break l;
         end
         x := 1;
       end
       f(x);",
      "var x; x := 1;
       l: while c() do
         if c() then
           x := 2;
           break l;
         end
         x := 1;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking to label out of iterative statement #2" |
      "var x; x := 1;
       l1: while c() do
         if c() then x := 1; break; else x := 1; end
         f(x); x := 2;
         l2 : while c() do
           if c() then x := 1; break l1; end
           x := 2;
         end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         if c() then x := 1; break; else x := 1; end
         f(1); x := 2;
         l2 : while c() do
           if c() then x := 1; break l1; end
           x := 2;
         end
         f(2); x := 1;
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check breaking to label out of iterative statement #3" |
      "var x;
       x := 1;
       l1: while c() do
         if c() then x := 1; break l1; else x := 1; end
         f(x); x := 2;
         l2 : while c() do
           if c() then x := 1; break l1; end
           if c() then x := 2; break l2; end
           f(x); x := 3;
           l3: while c() do
             if c() then x := 1; break l1; end
             if c() then x := 2; break l2; end
             if c() then x := 3; break l3; end
             f(x); x := 3;
           end
           f(x); x := 2;
         end
         f(x); x := 1;
       end
       f(x);",
      "var x;
       x := 1;
       l1: while c() do
         if c() then x := 1; break l1; else x := 1; end
         f(1); x := 2;
         l2 : while c() do
           if c() then x := 1; break l1; end
           if c() then x := 2; break l2; end
           f(2); x := 3;
           l3: while c() do
             if c() then x := 1; break l1; end
             if c() then x := 2; break l2; end
             if c() then x := 3; break l3; end
             f(3); x := 3;
           end
           f(3); x := 2;
         end
         f(2); x := 1;
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check breaking to label out of iterative statement #4" |
      "var x;
       x := 1;
       l1: while c() do
         if c() then x := 1; break l1; else x := 1; end
         f(x); x := 2;
         l2 : while c() do
           if c() then x := 1; break l1; end
           if c() then x := 2; break l2; end
           f(x); x := 3;
           l3: while c() do
             if c() then x := 4; break l1; end
             if c() then x := 2; break l2; end
             if c() then x := 3; break l3; end
             f(x); x := 3;
           end
           f(x); x := 2;
         end
         f(x); x := 1;
       end
       f(x);",
      "var x;
       x := 1;
       l1: while c() do
         if c() then x := 1; break l1; else x := 1; end
         f(1); x := 2;
         l2 : while c() do
           if c() then x := 1; break l1; end
           if c() then x := 2; break l2; end
           f(2); x := 3;
           l3: while c() do
             if c() then x := 4; break l1; end
             if c() then x := 2; break l2; end
             if c() then x := 3; break l3; end
             f(3); x := 3;
           end
           f(3); x := 2;
         end
         f(2); x := 1;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking to label out of iterative statement #5" |
      "var x;
       x := 1;
       l1: while c() do
         f(x);
         if c() then x := 1; break l1; else x := 1; end
         f(x); x := 2;
         l2 : while c() do
           if c() then x := 1; break l1; end
           if c() then x := 2; break l2; end
           f(x); x := 3;
           l3: while c() do
             if c() then x := 1; break l1; end
             if c() then x := 4; break l2; end
             if c() then x := 3; break l3; end
             f(x); x := 3;
           end
           f(x); x := 2;
         end
         f(x); x := 4;
       end
       f(x);",
      "var x;
       x := 1;
       l1: while c() do
         f(x);
         if c() then x := 1; break l1; else x := 1; end
         f(1); x := 2;
         l2 : while c() do
           if c() then x := 1; break l1; end
           if c() then x := 2; break l2; end
           f(2); x := 3;
           l3: while c() do
             if c() then x := 1; break l1; end
             if c() then x := 4; break l2; end
             if c() then x := 3; break l3; end
             f(3); x := 3;
           end
           f(3); x := 2;
         end
         f(x); x := 4;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking to label out of iterative statement #6" |
      "var x; x := 1;
       l1: while c() do
         if c() then x := 1; break; else dummy(); end
         f(x); x := 2;
         l2 : while c() do
           f(x);
           if c() then x := 1; break l1; else x := 2; end
           f(x); x := 1;
           if c() then
             x := 2;
             if c() then break; else x := 1; break l1; end
           else             
             if c() then break l1; else f(x); x := 2; end
           end
         end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         if c() then x := 1; break; else dummy(); end
         f(1); x := 2;
         l2 : while c() do
           f(2);
           if c() then x := 1; break l1; else x := 2; end
           f(2); x := 1;
           if c() then
             x := 2;
             if c() then break; else x := 1; break l1; end
           else             
             if c() then break l1; else f(1); x := 2; end
           end
         end
         f(2); x := 1;
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check breaking to label out of iterative statement #7" |
      "var x; x := 1;
       l1: while c() do
         if c() then x := 1; break; else dummy(); end
         f(x); x := 1;
         l2 : while c() do
           f(x);
           if c() then x := 1; break l1; else x := 1; end
           f(x); x := 1;
           if c() then
             x := 1;
             if c() then break; else x := 1; break l1; end
           else             
             if c() then break l1; else f(x); x := 1; end
           end
         end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         if c() then x := 1; break; else dummy(); end
         f(1); x := 1;
         l2 : while c() do
           f(1);
           if c() then x := 1; break l1; else x := 1; end
           f(1); x := 1;
           if c() then
             x := 1;
             if c() then break; else x := 1; break l1; end
           else             
             if c() then break l1; else f(1); x := 1; end
           end
         end
         f(1); x := 1;
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check breaking to label out of iterative statement #8" |
      "var x; x := 1;
       l1: while c() do
         if c() then x := 2; break; else dummy(); end
         f(x); x := 1;
         l2 : while c() do
           f(x);
           if c() then x := 2; break l1; else x := 1; end
           f(x); x := 2;
           if c() then
             x := 1;
             if c() then break; else x := 2; break l1; end
           else             
             if c() then break l1; else f(x); x := 1; end
           end
         end
         f(x); x := 2;
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         if c() then x := 2; break; else dummy(); end
         f(x); x := 1;
         l2 : while c() do
           f(1);
           if c() then x := 2; break l1; else x := 1; end
           f(1); x := 2;
           if c() then
             x := 1;
             if c() then break; else x := 2; break l1; end
           else             
             if c() then break l1; else f(2); x := 1; end
           end
         end
         f(1); x := 2;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking to label out of iterative statement #9" |
      "var x; x := 1;
       l1: while c() do
         if c() then x := 1; break; else dummy(); end
         f(x); x := 2;
         l2 : while c() do
           f(x);
           if c() then x := 1; break l1; else x := 2; end
           f(x); x := 1;
           if c() then
             x := 2;
             if c() then break; else break l1; end
           else             
             if c() then break l1; else f(x); x := 2; end
           end
         end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         if c() then x := 1; break; else dummy(); end
         f(1); x := 2;
         l2 : while c() do
           f(2);
           if c() then x := 1; break l1; else x := 2; end
           f(2); x := 1;
           if c() then
             x := 2;
             if c() then break; else break l1; end
           else             
             if c() then break l1; else f(1); x := 2; end
           end
         end
         f(2); x := 1;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking to label out of iterative statement #10" |
      "var x; x := 1;
       l1: while c() do
         if c() then x := 1; break; else dummy(); end
         f(x); x := 2;
         l2 : while c() do
           f(x);
           if c() then x := 1; break l1; else x := 2; end
           f(x); x := 1;
           if c() then
             x := 2;
             if c() then x := 3; break; else x := 1; break l1; end
           else             
             if c() then break l1; else f(x); x := 2; end
           end
         end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         if c() then x := 1; break; else dummy(); end
         f(1); x := 2;
         l2 : while c() do
           f(2);
           if c() then x := 1; break l1; else x := 2; end
           f(2); x := 1;
           if c() then
             x := 2;
             if c() then x := 3; break; else x := 1; break l1; end
           else             
             if c() then break l1; else f(1); x := 2; end
           end
         end
         f(x); x := 1;
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check breaking to label out of iterative statement #11" |
      "var x; x := 1;
       l1: while c() do
         while c() do
           x := 1; break l1;
         end
         x := 2;
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         while c() do
           x := 1; break l1;
         end
         x := 2;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking to label out of non-iterative statement #1" |
      "var x; x := 1;
       l1: begin
         if c() then x := 1; break l1; else x := 1; end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       l1: begin
         if c() then x := 1; break l1; else x := 1; end
         f(1); x := 1;
       end
       f(1);"
     )

  ; apply-propconst-test(!"Check breaking to label out of non-iterative statement #2" |
      "var x; x := 1;
       l1: begin
         if c() then x := 2; break l1; else x := 1; end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       l1: begin
         if c() then x := 2; break l1; else x := 1; end
         f(1); x := 1;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check breaking to label out of non-iterative statement #3" |
      "var x; x := 1;
       l1: begin
         if c() then x := 1; break l1; else x := 1; break; end
         f(x); x := 2;
       end
       f(x);",
      "var x; x := 1;
       l1: begin
         if c() then x := 1; break l1; else x := 1; break; end
         f(1); x := 2;
       end
       f(1);"
     )

  ; apply-propconst-test(!"Check breaking to label out of non-iterative statement #4" |
      "var x; x := 1;
       l1: begin
         if c() then x := 2; break l1; else x := 2; end
         l2: begin
           x := 1;
           if c() then x := 3; else x := 3; break l2; end
           if c() then x := 1; else x := 2; break l1; end
           if c() then x := 3; break; end
           f(x); x := 3;
         end
         f(x);
         if c() then x := 1; else x := 2; break; end
         f(x); x := 2;
       end
       f(x);",
      "var x; x := 1;
       l1: begin
         if c() then x := 2; break l1; else x := 2; end
         l2: begin
           x := 1;
           if c() then x := 3; else x := 3; break l2; end
           if c() then x := 1; else x := 2; break l1; end
           if c() then x := 3; break; end
           f(1); x := 3;
         end
         f(3);
         if c() then x := 1; else x := 2; break; end
         f(1); x := 2;
       end
       f(2);"
     )

  ; apply-propconst-test(!"Check breaking to label out of non-iterative statement #5" |
      "var x; x := 1;
       l1: begin
         if c() then x := 2; break l1; else x := 2; end
         l2: begin
           x := 1;
           if c() then x := 3; else x := 3; break l2; end
           if c() then x := 1; else x := 1; break l1; end
           if c() then x := 2; break; end
           f(x); x := 3;
         end
         f(x);
         if c() then x := 1; else x := 2; break; end
         f(x); x := 2;
       end
       f(x);",
      "var x; x := 1;
       l1: begin
         if c() then x := 2; break l1; else x := 2; end
         l2: begin
           x := 1;
           if c() then x := 3; else x := 3; break l2; end
           if c() then x := 1; else x := 1; break l1; end
           if c() then x := 2; break; end
           f(1); x := 3;
         end
         f(x);
         if c() then x := 1; else x := 2; break; end
         f(1); x := 2;
       end
       f(x);"
     )

  ; apply-propconst-test(!"Check breaking to label out of non-iterative statement #6" |
      "var x; x := 1;
       l1: while c() do
         l2: begin
           if c() then x := 2; break l2; else x := 2; end
           if c() then x := 2; break; end
           f(x); x := 2;
         end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         l2: begin
           if c() then x := 2; break l2; else x := 2; end
           if c() then x := 2; break; end
           f(2); x := 2;
         end
         f(2); x := 1;
       end
       f(1);"
     )

  ; apply-propconst-test(!"Check breaking to label out of non-iterative statement #7" |
      "var x; x := 1;
       l1: while c() do
         l2: begin
           if c() then x := 1; break l2; else x := 2; end
           if c() then x := 2; break; end
           f(x); x := 2;
         end
         f(x); x := 1;
         if c() then x := 1; break l1; end
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         l2: begin
           if c() then x := 1; break l2; else x := 2; end
           if c() then x := 2; break; end
           f(2); x := 2;
         end
         f(x); x := 1;
         if c() then x := 1; break l1; end
       end
       f(1);"
     )

  ; apply-propconst-test(!"Check breaking to label out of non-iterative statement #8" |
      "var x; x := 1;
       l1: while c() do
         l2: begin
           if c() then x := 2; break l2; else x := 2; end
           if c() then x := 1; break; end
           f(x); x := 2;
         end
         f(x); x := 1;
         if c() then x := 1; break; end
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         l2: begin
           if c() then x := 2; break l2; else x := 2; end
           if c() then x := 1; break; end
           f(2); x := 2;
         end
         f(x); x := 1;
         if c() then x := 1; break; end
       end
       f(1);"
     )

  ; apply-propconst-test(!"Check breaking to label out of non-iterative statement #9" |
      "var x; x := 1;
       l1: while c() do
         l2: begin
           if c() then x := 1; break l1; else x := 2; end
           if c() then x := 2; break; end
           f(x); x := 2;
         end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         l2: begin
           if c() then x := 1; break l1; else x := 2; end
           if c() then x := 2; break; end
           f(2); x := 2;
         end
         f(2); x := 1;
       end
       f(1);"
     )

  ; apply-propconst-test(!"Check breaking to label out of non-iterative statement #10" |
      "var x; x := 1;
       l1: while c() do
         l2: begin
           if c() then x := 2; break l1; else x := 2; end
           if c() then x := 2; break; end
           f(x); x := 2;
         end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         l2: begin
           if c() then x := 2; break l1; else x := 2; end
           if c() then x := 2; break; end
           f(2); x := 2;
         end
         f(2); x := 1;
       end
       f(x);"
     )

  ; apply-propconst-test(!"Check breaking to label out of non-iterative statement #11" |
      "var x;
       l1: begin
         x := 2;
         l2: while c() do
           if c() then x := 2; break l2; else x := 2; end
           if c() then x := 2; break; end
           f(x);
         end
         if c() then x := 1; break; end
         f(x); x := 1;
       end
       f(x);",
      "var x;
       l1: begin
         x := 2;
         l2: while c() do
           if c() then x := 2; break l2; else x := 2; end
           if c() then x := 2; break; end
           f(2);
         end
         if c() then x := 1; break; end
         f(2); x := 1;
       end
       f(1);"
     )

  ; apply-propconst-test(!"Check breaking to label out of non-iterative statement #12" |
      "var x;
       l1: begin
         x := 2;
         l2: while c() do
           if c() then x := 1; break l2; else x := 2; end
           if c() then x := 2; break; end
           f(x);
         end
         if c() then x := 1; break; end
         f(x); x := 1;
       end
       f(x);",
      "var x;
       l1: begin
         x := 2;
         l2: while c() do
           if c() then x := 1; break l2; else x := 2; end
           if c() then x := 2; break; end
           f(2);
         end
         if c() then x := 1; break; end
         f(x); x := 1;
       end
       f(1);"
     )

  ; apply-propconst-test(!"Check breaking to label out of non-iterative statement #13" |
      "var x;
       l1: begin
         x := 2;
         l2: while c() do
           if c() then x := 1; break l1; else x := 2; end
           if c() then x := 2; break; end
           f(x);
         end
         if c() then x := 1; break; end
         f(x); x := 1;
       end
       f(x);",
      "var x;
       l1: begin
         x := 2;
         l2: while c() do
           if c() then x := 1; break l1; else x := 2; end
           if c() then x := 2; break; end
           f(2);
         end
         if c() then x := 1; break; end
         f(2); x := 1;
       end
       f(1);"
     )

  ; apply-propconst-test(!"Check breaking to label out of non-iterative statement #14" |
      "var x;
       l1: begin
         x := 2;
         l2: while c() do
           if c() then x := 2; break l1; else x := 2; end
           if c() then x := 2; break; end
           f(x);
         end
         if c() then x := 1; break; end
         f(x); x := 1;
       end
       f(x);",
      "var x;
       l1: begin
         x := 2;
         l2: while c() do
           if c() then x := 2; break l1; else x := 2; end
           if c() then x := 2; break; end
           f(2);
         end
         if c() then x := 1; break; end
         f(2); x := 1;
       end
       f(x);"
     )

  pc-continue-tests = id

/////// non-structured tests

  ; apply-propconst-test(!"Check continuing iterative statement #1" |
      "var x;
       x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue; end
         x := 1;
       end
       f(x);",
      "var x;
       x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue; end
         x := 1;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #2" |
      "var x; x := 1; while c() do f(x); continue; x := 2; end f(x);",
      "var x; x := 1; while c() do f(1); continue; x := 2; end f(1);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #3" |
      "var x; x := 1;
       while c() do
         if c() then x := 1; continue; end
         f(x);
         if c() then x := 1; continue;
         else
           x := 1;
           if c() then x := 3; else dummy(); continue; f(x); end
           f(x);
         end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       while c() do
         if c() then x := 1; continue; end
         f(1);
         if c() then x := 1; continue;
         else
           x := 1;
           if c() then x := 3; else dummy(); continue; f(1); end
           f(3);
         end
         f(3); x := 1;
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #4" |
      "var x; x := 1;
       while c() do
         if c() then x := 1; continue; end
         f(x);
         if c() then x := 1; continue;
         else
           x := 1;
           if c() then x := 3; else x := 2; continue; f(x); end
           f(x);
         end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       while c() do
         if c() then x := 1; continue; end
         f(x);
         if c() then x := 1; continue;
         else
           x := 1;
           if c() then x := 3; else x := 2; continue; f(2); end
           f(3);
         end
         f(3); x := 1;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #5" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue; else x := 3; end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue; else x := 3; end
         f(3); x := 1;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #6" |
      "var x; var y; x := 1; y := 1;
       while c() do
         f(x,y);
         if c() then y := 1; continue; end
         f(x,y);
         if c() then x := 1; continue; else x := 1; continue; end
         if c() then y := 3; else y := 2; end
       end
       f(x,y);",
      "var x; var y; x := 1; y := 1;
       while c() do
         f(1,1);
         if c() then y := 1; continue; end
         f(1,1);
         if c() then x := 1; continue; else x := 1; continue; end
         if c() then y := 3; else y := 2; end
       end
       f(1,1);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #7" |
      "var x; var y; x := 1; y := 1;
       while c() do
         f(x,y);
         if c() then y := 1; continue; end
         f(x,y);
         if c() then x := 1; continue; else x := 1; end
         if c() then y := 3; else y := 2; end
       end
       f(x,y);",
      "var x; var y; x := 1; y := 1;
       while c() do
         f(1,y);
         if c() then y := 1; continue; end
         f(1,y);
         if c() then x := 1; continue; else x := 1; end
         if c() then y := 3; else y := 2; end
       end
       f(1,y);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #8" |
      "var x; var y; x := 1; y := 3;
       while c() do
         f(x,y);
         if c() then y := 1; x := 2; continue; end
         f(x,y);
         if c() then x := 1; continue; else x := 1; end
         f(x,y);
         if c() then y := 3; else y := 3; end
       end
       f(x,y);",
      "var x; var y; x := 1; y := 3;
       while c() do
         f(x,y);
         if c() then y := 1; x := 2; continue; end
         f(x,y);
         if c() then x := 1; continue; else x := 1; end
         f(1,y);
         if c() then y := 3; else y := 3; end
       end
       f(x,y);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #9" |
      "var x; var y; x := 1; y := 1;
       while c() do
         f(x,y);
         if c() then y := 1; continue; end
         f(x,y);
         if c() then x := 2; continue; else x := 2; end
         f(x,y);
         if c() then y := 3; else y := 2; end
       end
       f(x,y);",
      "var x; var y; x := 1; y := 1;
       while c() do
         f(x,y);
         if c() then y := 1; continue; end
         f(x,y);
         if c() then x := 2; continue; else x := 2; end
         f(2,y);
         if c() then y := 3; else y := 2; end
       end
       f(x,y);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #10" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; continue; else x := 2; end
         if c() then x := 2; else if c() then continue; else x := 2; end end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; continue; else x := 2; end
         if c() then x := 2; else if c() then continue; else x := 2; end end
         f(2); x := 1;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #11" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then
           if c() then
             if c() then x := 1; continue; else dummy(); end
           else
             if c() then dummy(); else x := 1; continue; end
           end
         else
           if c() then
             if c() then dummy(); else x := 1; continue; end
           else
             if c() then x := 1; continue; else dummy(); end
           end
         end
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(1);
         if c() then
           if c() then
             if c() then x := 1; continue; else dummy(); end
           else
             if c() then dummy(); else x := 1; continue; end
           end
         else
           if c() then
             if c() then dummy(); else x := 1; continue; end
           else
             if c() then x := 1; continue; else dummy(); end
           end
         end
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #12" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then
           if c() then
             if c() then x := 1; continue; else dummy(); end
           else
             if c() then dummy(); else x := 1; continue; end
           end
         else
           if c() then
             if c() then dummy(); else x := 2; continue; end
           else
             if c() then x := 1; continue; else dummy(); end
           end
         end
       end
       f(x); ",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then
           if c() then
             if c() then x := 1; continue; else dummy(); end
           else
             if c() then dummy(); else x := 1; continue; end
           end
         else
           if c() then
             if c() then dummy(); else x := 2; continue; end
           else
             if c() then x := 1; continue; else dummy(); end
           end
         end
       end
       f(x);"
    )

/////// (x,a); [(x,none) < (x,?); continue; + (x,?)]*

  ; apply-propconst-test(!"Check continuing iterative statement #13" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; continue;
         else        x := 1;
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(1);
         if c() then x := 1; continue;
         else        x := 1;
         end
         f(1);
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #14" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; continue;
         else        x := 2;
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; continue;
         else        x := 2;
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #15" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        x := 1;
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        x := 1;
         end
         f(1);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #16" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        x := 2;
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        x := 2;
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #17" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        x := 3;
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        x := 3;
         end
         f(3);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #18" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; continue;
         else        dummy();
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(1);
         if c() then x := 1; continue;
         else        dummy();
         end
         f(1);
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #19" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then dummy(); continue;
         else        x := 1;
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(1);
         if c() then dummy(); continue;
         else        x := 1;
         end
         f(1);
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #20" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        dummy();
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        dummy();
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #21" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then dummy(); continue;
         else        x := 2;
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then dummy(); continue;
         else        x := 2;
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #22" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then dummy(); continue;
         else        dummy();
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(1);
         if c() then dummy(); continue;
         else        dummy();
         end
         f(1);
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #23" |
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := 1; continue;
         else        x := y;
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := 1; continue;
         else        x := y;
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #24" |
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := y; continue;
         else        x := 1;
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := y; continue;
         else        x := 1;
         end
         f(1);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #25" |
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        x := y;
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        x := y;
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #26" |
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := y; continue;
         else        x := 2;
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := y; continue;
         else        x := 2;
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #27" |
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := y; continue;
         else        x := y;
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := y; continue;
         else        x := y;
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #28" |
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then dummy(); continue;
         else        x := y;
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then dummy(); continue;
         else        x := y;
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #29" |
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := y; continue;
         else        dummy();
         end
         f(x);
       end
       f(x);",
      "var x; var y; x := 1;
       while c() do
         f(x);
         if c() then x := y; continue;
         else        dummy();
         end
         f(x);
       end
       f(x);"
    )

/////// (x,empty); [(x,none) < (x,?); continue; + (x,?)]*

  ; apply-propconst-test(!"Check continuing iterative statement #30" |
      "var x;
       while c() do
         f(x);
         if c() then x := 1; continue;
         else        x := 1;
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then x := 1; continue;
         else        x := 1;
         end
         f(1);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #31" |
      "var x;
       while c() do
         f(x);
         if c() then x := 1; continue;
         else        x := 2;
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then x := 1; continue;
         else        x := 2;
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #32" |
      "var x;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        x := 1;
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        x := 1;
         end
         f(1);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #33" |
      "var x;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        x := 2;
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        x := 2;
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #34" |
      "var x;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        x := 3;
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        x := 3;
         end
         f(3);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #35" |
      "var x;
       while c() do
         f(x);
         if c() then x := 1; continue;
         else        dummy();
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then x := 1; continue;
         else        dummy();
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #36" |
      "var x;
       while c() do
         f(x);
         if c() then dummy(); continue;
         else        x := 1;
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then dummy(); continue;
         else        x := 1;
         end
         f(1);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #37" |
      "var x;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        dummy();
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        dummy();
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #38" |
      "var x;
       while c() do
         f(x);
         if c() then dummy(); continue;
         else        x := 2;
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then dummy(); continue;
         else        x := 2;
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #39" |
      "var x;
       while c() do
         f(x);
         if c() then dummy(); continue;
         else        dummy();
         end
         f(x);
       end
       f(x);",
      "var x;
       while c() do
         f(x);
         if c() then dummy(); continue;
         else        dummy();
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #40" |
      "var x; var y;
       while c() do
         f(x);
         if c() then x := 1; continue;
         else        x := y;
         end
         f(x);
       end
       f(x);",
      "var x; var y;
       while c() do
         f(x);
         if c() then x := 1; continue;
         else        x := y;
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #41" |
      "var x; var y;
       while c() do
         f(x);
         if c() then x := y; continue;
         else        x := 1;
         end
         f(x);
       end
       f(x);",
      "var x; var y;
       while c() do
         f(x);
         if c() then x := y; continue;
         else        x := 1;
         end
         f(1);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #42" |
      "var x; var y;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        x := y;
         end
         f(x);
       end
       f(x);",
      "var x; var y;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else        x := y;
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #43" |
      "var x; var y;
       while c() do
         f(x);
         if c() then x := y; continue;
         else        x := 2;
         end
         f(x);
       end
       f(x);",
      "var x; var y;
       while c() do
         f(x);
         if c() then x := y; continue;
         else        x := 2;
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #44" |
      "var x; var y;
       while c() do
         f(x);
         if c() then x := y; continue;
         else        x := y;
         end
         f(x);
       end
       f(x);",
      "var x; var y;
       while c() do
         f(x);
         if c() then x := y; continue;
         else        x := y;
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #45" |
      "var x; var y;
       while c() do
         f(x);
         if c() then dummy(); continue;
         else        x := y;
         end
         f(x);
       end
       f(x);",
      "var x; var y;
       while c() do
         f(x);
         if c() then dummy(); continue;
         else        x := y;
         end
         f(x);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #46" |
      "var x; var y;
       while c() do
         f(x);
         if c() then x := y; continue;
         else        dummy();
         end
         f(x);
       end
       f(x);",
      "var x; var y;
       while c() do
         f(x);
         if c() then x := y; continue;
         else        dummy();
         end
         f(x);
       end
       f(x);"
    )

/////// (x,a); [(x,none) < (x,?); continue; + ((x,none) < (x,?) + (x,?); continue;)]*

  ; apply-propconst-test(!"Check continuing iterative statement #47" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; continue;
         else if c() then x := 1; else x := 1; continue; end
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(1);
         if c() then x := 1; continue;
         else if c() then x := 1; else x := 1; continue; end
         end
         f(1);
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #48" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else if c() then x := 1; else x := 2; continue; end
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else if c() then x := 1; else x := 2; continue; end
         end
         f(1);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #49" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; continue;
         else if c() then x := 2; else x := 1; continue; end
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; continue;
         else if c() then x := 2; else x := 1; continue; end
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #50" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; continue;
         else if c() then x := 2; else x := 3; continue; end
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 1; continue;
         else if c() then x := 2; else x := 3; continue; end
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #51" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else if c() then x := 1; else x := 3; continue; end
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else if c() then x := 1; else x := 3; continue; end
         end
         f(1);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #52" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else if c() then x := 2; else x := 2; continue; end
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else if c() then x := 2; else x := 2; continue; end
         end
         f(2);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #53" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else if c() then x := 3; else x := 4; continue; end
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else if c() then x := 3; else x := 4; continue; end
         end
         f(3);
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing iterative statement #54" |
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else if c() then x := 3; else x := 2; continue; end
         end
         f(x);
       end
       f(x);",
      "var x; x := 1;
       while c() do
         f(x);
         if c() then x := 2; continue;
         else if c() then x := 3; else x := 2; continue; end
         end
         f(3);
       end
       f(x);"
    )

  pc-continue-to-label-tests = id

  ; apply-propconst-test(!"Check continuing to label out of iterative statement #1" |
      "var x;
       x := 1;
       l: while c() do
         f(x);
         if c() then
           x := 2;
           continue l;
         end
         x := 1;
       end
       f(x);",
      "var x;
       x := 1;
       l: while c() do
         f(x);
         if c() then
           x := 2;
           continue l;
         end
         x := 1;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing to label out of iterative statement #2" |
      "var x; x := 1;
       l1: while c() do
         f(x);
         if c() then x := 1; continue; else x := 1; end
         f(x); x := 2;
         l2 : while c() do
           if c() then x := 1; continue l1; end
           x := 2;
         end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         f(1);
         if c() then x := 1; continue; else x := 1; end
         f(1); x := 2;
         l2 : while c() do
           if c() then x := 1; continue l1; end
           x := 2;
         end
         f(2); x := 1;
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check continuing to label out of iterative statement #3" |
      "var x; x := 1;
       l1: while c() do
         f(x);
         if c() then x := 1; continue; else x := 1; end
         f(x); x := 2;
         l2 : while c() do
           if c() then x := 2; continue l1; end
           x := 2;
         end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         f(x);
         if c() then x := 1; continue; else x := 1; end
         f(1); x := 2;
         l2 : while c() do
           if c() then x := 2; continue l1; end
           x := 2;
         end
         f(2); x := 1;
       end
       f(x);"
    )
  ; apply-propconst-test(!"Check continuing to label out of iterative statement #4" |
      "var x;
       x := 1;
       l1: while c() do
         f(x);
         if c() then x := 1; continue l1; else x := 1; end
         f(x); x := 2;
         l2 : while c() do
           f(x);
           if c() then x := 1; continue l1; end
           if c() then x := 2; continue l2; end
           f(x); x := 3;
           l3: while c() do
             f(x);
             if c() then x := 1; continue l1; end
             if c() then x := 2; continue l2; end
             if c() then x := 3; continue l3; end
             f(x); x := 3;
           end
           f(x); x := 2;
         end
         f(x); x := 1;
       end
       f(x);",
      "var x;
       x := 1;
       l1: while c() do
         f(1);
         if c() then x := 1; continue l1; else x := 1; end
         f(1); x := 2;
         l2 : while c() do
           f(2);
           if c() then x := 1; continue l1; end
           if c() then x := 2; continue l2; end
           f(2); x := 3;
           l3: while c() do
             f(3);
             if c() then x := 1; continue l1; end
             if c() then x := 2; continue l2; end
             if c() then x := 3; continue l3; end
             f(3); x := 3;
           end
           f(3); x := 2;
         end
         f(2); x := 1;
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check continuing to label out of iterative statement #5" |
      "var x;
       x := 1;
       l1: while c() do
         f(x);
         if c() then x := 1; continue l1; else x := 1; end
         f(x); x := 2;
         l2 : while c() do
           f(x);
           if c() then x := 1; continue l1; end
           if c() then x := 2; continue l2; end
           f(x); x := 3;
           l3: while c() do
             f(x);
             if c() then x := 4; continue l1; end
             if c() then x := 2; continue l2; end
             if c() then x := 3; continue l3; end
             f(x); x := 3;
           end
           f(x); x := 2;
         end
         f(x); x := 1;
       end
       f(x);",
      "var x;
       x := 1;
       l1: while c() do
         f(x);
         if c() then x := 1; continue l1; else x := 1; end
         f(1); x := 2;
         l2 : while c() do
           f(2);
           if c() then x := 1; continue l1; end
           if c() then x := 2; continue l2; end
           f(2); x := 3;
           l3: while c() do
             f(3);
             if c() then x := 4; continue l1; end
             if c() then x := 2; continue l2; end
             if c() then x := 3; continue l3; end
             f(3); x := 3;
           end
           f(3); x := 2;
         end
         f(2); x := 1;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing to label out of iterative statement #6" |
      "var x;
       x := 1;
       l1: while c() do
         f(x);
         if c() then x := 1; continue l1; else x := 1; end
         f(x); x := 2;
         l2 : while c() do
           f(x);
           if c() then x := 1; continue l1; end
           if c() then x := 2; continue l2; end
           f(x); x := 3;
           l3: while c() do
             f(x);
             if c() then x := 1; continue l1; end
             if c() then x := 4; continue l2; end
             if c() then x := 3; continue l3; end
             f(x); x := 3;
           end
           f(x); x := 2;
         end
         f(x); x := 4;
       end
       f(x);",
      "var x;
       x := 1;
       l1: while c() do
         f(x);
         if c() then x := 1; continue l1; else x := 1; end
         f(1); x := 2;
         l2 : while c() do
           f(x);
           if c() then x := 1; continue l1; end
           if c() then x := 2; continue l2; end
           f(x); x := 3;
           l3: while c() do
             f(3);
             if c() then x := 1; continue l1; end
             if c() then x := 4; continue l2; end
             if c() then x := 3; continue l3; end
             f(3); x := 3;
           end
           f(3); x := 2;
         end
         f(x); x := 4;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing to label out of iterative statement #7" |
      "var x; x := 1;
       l1: while c() do
         f(x);
         if c() then x := 1; continue; else dummy(); end
         f(x); x := 2;
         l2 : while c() do
           f(x);
           if c() then x := 1; continue l1; else x := 2; end
           f(x); x := 1;
           if c() then
             x := 2;
             if c() then continue; else x := 1; continue l1; end
           else             
             if c() then continue l1; else f(x); x := 2; end
           end
         end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         f(1);
         if c() then x := 1; continue; else dummy(); end
         f(1); x := 2;
         l2 : while c() do
           f(2);
           if c() then x := 1; continue l1; else x := 2; end
           f(2); x := 1;
           if c() then
             x := 2;
             if c() then continue; else x := 1; continue l1; end
           else             
             if c() then continue l1; else f(1); x := 2; end
           end
         end
         f(2); x := 1;
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check continuing to label out of iterative statement #8" |
      "var x; x := 1;
       l1: while c() do
         f(x);
         if c() then x := 1; continue; else dummy(); end
         f(x); x := 1;
         l2 : while c() do
           f(x);
           if c() then x := 1; continue l1; else x := 1; end
           f(x); x := 1;
           if c() then
             x := 1;
             if c() then continue; else x := 1; continue l1; end
           else             
             if c() then continue l1; else f(x); x := 1; end
           end
         end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         f(1);
         if c() then x := 1; continue; else dummy(); end
         f(1); x := 1;
         l2 : while c() do
           f(1);
           if c() then x := 1; continue l1; else x := 1; end
           f(1); x := 1;
           if c() then
             x := 1;
             if c() then continue; else x := 1; continue l1; end
           else             
             if c() then continue l1; else f(1); x := 1; end
           end
         end
         f(1); x := 1;
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check continuing to label out of iterative statement #9" |
      "var x; x := 1;
       l1: while c() do
         f(x);
         if c() then x := 2; continue; else dummy(); end
         f(x); x := 1;
         l2 : while c() do
           f(x);
           if c() then x := 2; continue l1; else x := 1; end
           f(x); x := 2;
           if c() then
             x := 1;
             if c() then continue; else x := 2; continue l1; end
           else             
             if c() then continue l1; else f(x); x := 1; end
           end
         end
         f(x); x := 2;
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         f(x);
         if c() then x := 2; continue; else dummy(); end
         f(x); x := 1;
         l2 : while c() do
           f(1);
           if c() then x := 2; continue l1; else x := 1; end
           f(1); x := 2;
           if c() then
             x := 1;
             if c() then continue; else x := 2; continue l1; end
           else             
             if c() then continue l1; else f(2); x := 1; end
           end
         end
         f(1); x := 2;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing to label out of iterative statement #10" |
      "var x; x := 1;
       l1: while c() do
         f(x);
         if c() then x := 1; continue; else dummy(); end
         f(x); x := 2;
         l2 : while c() do
           f(x);
           if c() then x := 1; continue l1; else x := 2; end
           f(x); x := 1;
           if c() then
             x := 2;
             if c() then continue; else continue l1; end
           else             
             if c() then continue l1; else f(x); x := 2; end
           end
         end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         f(x);
         if c() then x := 1; continue; else dummy(); end
         f(x); x := 2;
         l2 : while c() do
           f(2);
           if c() then x := 1; continue l1; else x := 2; end
           f(2); x := 1;
           if c() then
             x := 2;
             if c() then continue; else continue l1; end
           else             
             if c() then continue l1; else f(1); x := 2; end
           end
         end
         f(2); x := 1;
       end
       f(x);"
    )

  ; apply-propconst-test(!"Check continuing to label out of iterative statement #11" |
      "var x; x := 1;
       l1: while c() do
         f(x);
         if c() then x := 1; continue; else dummy(); end
         f(x); x := 2;
         l2 : while c() do
           f(x);
           if c() then x := 1; continue l1; else x := 2; end
           f(x); x := 1;
           if c() then
             x := 2;
             if c() then x := 3; continue; else x := 1; continue l1; end
           else             
             if c() then continue l1; else f(x); x := 2; end
           end
         end
         f(x); x := 1;
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         f(1);
         if c() then x := 1; continue; else dummy(); end
         f(1); x := 2;
         l2 : while c() do
           f(x);
           if c() then x := 1; continue l1; else x := 2; end
           f(2); x := 1;
           if c() then
             x := 2;
             if c() then x := 3; continue; else x := 1; continue l1; end
           else             
             if c() then continue l1; else f(1); x := 2; end
           end
         end
         f(x); x := 1;
       end
       f(1);"
    )

  ; apply-propconst-test(!"Check continuing to label out of iterative statement #12" |
      "var x; x := 1;
       l1: while c() do
         f(x);
         while c() do
           f(x); x := 1; continue l1;
         end
         x := 2;
       end
       f(x);",
      "var x; x := 1;
       l1: while c() do
         f(1);
         while c() do
           f(1); x := 1; continue l1;
         end
         x := 2;
       end
       f(1);"
    )
