module share-test
imports libstratego-lib

signature
  sorts A
  constructors
    F : A * A -> A
    A : A 
    Var : String -> A
    Let : String * A * A -> A

strategies

  main-share-test = 
    test-suite(!"share-test",
	test1;
	test2;
	test3
    )

  test1 = 
    apply-and-check(!"test1"
	, share(\ x -> Var(x) \
               ,fail
	       ,\ (x, t, t') -> Let(x, t, t') \
	       )
	, !F(F(A(), A()), F(F(A(), A()), F(A(), A())))
	, ?Let(Var(var1077592168),A(),
           Let(Var(var1075859784),F(Var(var1077592168),Var(var1077592168)),
               F(Var(var1075859784),F(Var(var1075859784),Var(var1075859784)))))
	)

  test2 = 
    apply-and-check(!"test2"
	, graph(\ x -> Var(x) \ )
	, !F(F(A(), A()), F(F(A(), A()), F(A(), A())))
	, ?[(Var(var1076162904),F(Var(var1076162872),Var(var1076162888))), 
	    (Var(var1076162888),F(Var(var1076162872),Var(var1076162872))), 
	    (Var(var1076162872),F(Var(var1077895264),Var(var1077895264))),
	    (Var(var1077895264),A())]
	)

  test3 = 
    apply-and-check(!"test3"
	, inline-graph(fail, \ (x, t, t') -> Let(x, t, t') \ )
	, ![(Var(1076162904),F(Var(1076162872),Var(1076162888))), 
	    (Var(1076162888),F(Var(1076162872),Var(1076162872))),
	    (Var(1076162872),F(Var(1077895264),Var(1077895264))), 
	    (Var(1077895264),A())]
	, ?Let(Var(var1077895264),A(),
           Let(Var(var1076162872),F(Var(var1077895264),Var(var1077895264)),
               F(Var(var1076162872),F(Var(var1076162872),Var(var1076162872)))))
	)     

