module dr-dce-tests
imports
  dr-test-utils

/**
 * This test suite uses dead code elimination for TIL programs
 * as a real-life test of the dynamic rules library.
 */

strategies

  main =
    dead-code-elimination-tests

  dead-code-elimination-tests =
    test-suite(!"Dynamic Rules Library -- Dead Code Elimination",
      where(separation-message(|"Dynamic Rules Library -- Dead Code Elimination -- Union Tests"))
//    ; where(description-message(|"  notation in test names: rule before applying intersection"))
//    ; where(description-message(|"                          < rule in left branch"))
//    ; where(description-message(|"                          + rule in right branch"))
//    ; where(description-message(|"  (x,val) means rule with key x, and val decodes like this:"))
//    ; where(description-message(|"    - same letter means redefinition with the same value"))
//    ; where(description-message(|"    - different letter means redefinition with a different value"))
//    ; where(description-message(|"    - \"undef\" means undefinition of rule"))
//    ; where(description-message(|"    - \"none\" means no change to rule"))
//    ; where(description-message(|"    - \"empty\" means no rule is defined at that point"))
    ; dce-union-tests
    ; where(separation-message(|"Dynamic Rules Library -- Dead Code Elimination -- Fix and Union Tests"))
//    ; where(description-message(|"  notation in test names: rule before applying intersection"))
//    ; where(description-message(|"                          ; [rule in iteration]*"))
//    ; where(description-message(|"  (x,val) decodes as before"))
    ; dce-fix-and-union-tests
    ; where(separation-message(|"Dynamic Rules Library -- Dead Code Elimination -- Break Tests"))
    ; dce-break-tests
    )

strategies

  dce-union-tests = id

  ; apply-dce-test(!"Check rule set for VarNeeded after x < x + x" |
      "var x; x := 0; if c() then f(x); else f(x); end f(x);",
      "var x; x := 0; if c() then f(x); else f(x); end f(x);"
    )

  ; apply-dce-test(!"Check rule set for VarNeeded after x < x + none" |
      "var x; x := 0; if c() then f(x); else dummy(); end f(x);",
      "var x; x := 0; if c() then f(x); else dummy(); end f(x);"
    )

  ; apply-dce-test(!"Check rule set for VarNeeded after x < none + x" |
      "var x; x := 0; if c() then dummy(); else f(x); end f(x);",
      "var x; x := 0; if c() then dummy(); else f(x); end f(x);"
    )

  ; apply-dce-test(!"Check rule set for VarNeeded after x < none + none" |
      "var x; x := 0; if c() then dummy(); else dummy(); end f(x);",
      "var x; x := 0; if c() then dummy(); else dummy(); end f(x);"
    )

  ; apply-dce-test(!"Check rule set for VarNeeded after x < x + undef" |
      "var x; x := 0; if c() then f(x); else x := 0; end f(x);",
      "var x; x := 0; if c() then f(x); else x := 0; end f(x);"
    )

  ; apply-dce-test(!"Check rule set for VarNeeded after x < undef + x" |
      "var x; x := 0; if c() then x := 0; else f(x); end f(x);",
      "var x; x := 0; if c() then x := 0; else f(x); end f(x);"
    )

  ; apply-dce-test(!"Check rule set for VarNeeded after x < undef + undef" |
      "var x; x := 0; if c() then x := 0; else x := 0; end f(x);",
      "var x; if c() then x := 0; else x := 0; end f(x);"
    )

  ; apply-dce-test(!"Check rule set for VarNeeded after x < none + undef" |
      "var x; x := 0; if c() then dummy(); else x := 0; end f(x);",
      "var x; x := 0; if c() then dummy(); else x := 0; end f(x);"
    )

  ; apply-dce-test(!"Check rule set for VarNeeded after x < undef + none" |
      "var x; x := 0; if c() then x := 0; else dummy(); end f(x);",
      "var x; x := 0; if c() then x := 0; else dummy(); end f(x);"
    )

  ; apply-dce-test(!"Check rule set for VarNeeded after empty < x + x" |
      "var x; x := 0; if c() then f(x); else f(x); end",
      "var x; x := 0; if c() then f(x); else f(x); end"
    )

  ; apply-dce-test(!"Check rule set for VarNeeded after empty < x + none" |
      "var x; x := 0; if c() then f(x); else dummy(); end",
      "var x; x := 0; if c() then f(x); else dummy(); end"
    )

  ; apply-dce-test(!"Check rule set for VarNeeded after empty < none + x" |
      "var x; x := 0; if c() then dummy(); else f(x); end",
      "var x; x := 0; if c() then dummy(); else f(x); end"
    )

  ; apply-dce-test(!"Check rule set for VarNeeded after empty < none + none" |
      "var x; x := 0; if c() then dummy(); else dummy(); end",
      "if c() then dummy(); else dummy(); end"
    )

  ; apply-dce-test(!"Check rule set for VarNeeded after empty < x + undef" |
      "var x; x := 0; if c() then f(x); else dummy(); x := 0; end",
      "var x; x := 0; if c() then f(x); else dummy(); end"
    )

  ; apply-dce-test(!"Check rule set for VarNeeded after empty < undef + x" |
      "var x; x := 0; if c() then dummy(); x := 0; else f(x); end",
      "var x; x := 0; if c() then dummy(); else f(x); end"
    )

  ; apply-dce-test(!"Check rule set for VarNeeded after empty < undef + undef" |
      "var x; x := 0; if c() then x := 0; else x := 0; end dummy();",
      "dummy();"
    )

  ; apply-dce-test(!"Check rule set for VarNeeded after empty < none + undef" |
      "var x; x := 0; if c() then dummy(); else x := 0; dummy(); end dummy();",
      "if c() then dummy(); else dummy(); end dummy();"
    )

  ; apply-dce-test(!"Check rule set for VarNeeded after empty < undef + none" |
      "var x; x := 0; if c() then x := 0; dummy(); else dummy(); end dummy();",
      "if c() then dummy(); else dummy(); end dummy();"
    )

  dce-fix-and-union-tests = id

  ; apply-dce-test(!"Check rule set after x; [x]*" |
      "var x; x := 0; while c() do f(x); end f(x);",
      "var x; x := 0; while c() do f(x); end f(x);"
    )

  ; apply-dce-test(!"Check rule set after x; [none]*" |
      "var x; x := 0; while c() do dummy(); end f(x);",
      "var x; x := 0; while c() do dummy(); end f(x);"
    )

  ; apply-dce-test(!"Check rule set after x; [undef]*" |
      "var x; x := 0; while c() do x := 0; end f(x);",
      "var x; x := 0; while c() do x := 0; end f(x);"
    )

  ; apply-dce-test(!"Check rule set after empty; [x]*" |
      "var x; x := 0; while c() do f(x); end",
      "var x; x := 0; while c() do f(x); end"
    )

  ; apply-dce-test(!"Check rule set after empty; [none]*" |
      "var x; x := 0; while c() do dummy(); end",
      "while c() do dummy(); end"
    )

  ; apply-dce-test(!"Check rule set after empty; [undef]*" |
      "var x; x := 0; while c() do x := 0; dummy(); end",
      "while c() do dummy(); end"
    )

  dce-break-tests = id

  ; apply-dce-test(!"Check break scenario #1" |
      "var x; x := 0;
       while c() do
         if c() then
           dummy();
         else
           x := 1;
           break;
         end
         f(x);
       end",
      "var x; x := 0;
       while c() do
         if c() then
           dummy();
         else
           break;
         end
         f(x);
       end"
    )

  ; apply-dce-test(!"Check break scenario #2" |
      "var x; x := 0;
       while c() do
         if c() then
           dummy();
         else
           x := 1;
           break;
         end
         f(x);
       end
       f(x);",
      "var x; x := 0;
       while c() do
         if c() then
           dummy();
         else
           x := 1;
           break;
         end
         f(x);
       end
       f(x);"
    )

  ; apply-dce-test(!"Check break scenario #3" |
      "var x; x := 0;
       while c() do
         if c() then
           dummy();
         else
           x := 1;
           break;
           f(x);
           x := 1;
         end
         f(x);
       end",
      "var x; x := 0;
       while c() do
         if c() then
           dummy();
         else
           break;
           f(x);
           x := 1;
         end
         f(x);
       end"
    )

  ; apply-dce-test(!"Check break scenario #4" |
      "var x; x := 0;
       while c() do
         if c() then
           f(x);
         else
           x := 1;
           break;
         end
         f(x);
       end",
      "var x; x := 0;
       while c() do
         if c() then
           f(x);
         else
           break;
         end
         f(x);
       end"
    )

  ; apply-dce-test(!"Check break scenario #5" |
      "var x; x := 0;
       while c() do
         if c() then
           dummy(); x := 1;
         else
           x := 1; break;
         end
         x := 2;
         f(x);
       end
       f(x);",
      "var x; x := 0;
       while c() do
         if c() then
           dummy();
         else
           x := 1; break;
         end
         x := 2;
         f(x);
       end
       f(x);"
    )

  ; apply-dce-test(!"Check break scenario #6" |
      "var x; x := 0;
       while c() do
         var x;
         if c() then
           dummy(); x := 1;
         else
           x := 1; break;
         end
         x := 2;
         f(x);
       end
       f(x);",
      "var x; x := 0;
       while c() do
         var x;
         if c() then
           dummy();
         else
           break;
         end
         x := 2;
         f(x);
       end
       f(x);"
    )

  ; apply-dce-test(!"Check break scenario #7" |
      "var x; var y; var z; y := 1;
       while c() do
         var x;
         x := 1; y := 1; z := 1;
         if c() then
           var x;
           if c() then x := 1; y := 1; break;
           else        x := 1; z := 1;
           end
         else
           var y;
           if c() then y := 1; z := 1;
           else        y := 1; z := 1; break;
           end
         end
         f(x, y, z);
       end
       x := 1; z := 1;
       f(x, y, z);",
      "var x; var y; var z; y := 1;
       while c() do
         var x;
         x := 1; y := 1;
         if c() then
           if c() then y := 1; break;
           else        z := 1;
           end
         else
           if c() then z := 1;
           else        break;
           end
         end
         f(x, y, z);
       end
       x := 1; z := 1;
       f(x, y, z);"
    )
