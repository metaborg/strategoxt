/**
 * This module provides a basic strategy for specifying
 * run-time verified strategies.
 *
 * @author Lennart Kats <lennart add lclnet.nl>
 */
module lang/with

imports
  util/log
  strategy/conditional

strategies

  /**
   * Evaluate a strategy s, or, if s fails, end with a fatal error.
   *
   * @note In future revisions, a facility may be provided to "catch"
   *       failures raised by with clauses and uses of this strategy.
   */
  with(s|message) =
    where(s <+ ?term; prim("SSL_stacktrace_get_all_frame_names"); report-failure(|message, term))

  /**
  * Evaluate strategy s1 and catch with-failures that get thrown.
  * If s1 throws a with-failure then s2 is called on the original input term 
  * and a List(String) representation of the stack trace. 
  * The following defines the behaviour of catch-with on input term t:
  * 	
  * <s1> t if success(s1) or fail(s1)
  * <s2> (message, t, trace) if withfail(s1)
  * 
  * @param a -> b
  * @param (String, a, List(String)) -> c
  * @type a -> b | c
  */
  catch-with(s1, s2) = prim("SSL_EXT_catch_with", s1, s2|)
  
  /**
  * @internal
  */
  report-with-failure(|strategyname) =
    report-failure(|["Internal error: with clause failed unexpectedly in ", strategyname ], <id>)

