module dr-test-utils
imports
  libstratego-lib
  libstratego-sglr
  til/opt/til-propconst
  til/opt/til-dce
  til/opt/til-varunion

/**
 * Test utils for the test suite of the dynamic rules library.
 * 
 * The fail-* version of test applications is used to
 * allow committing of work in progress. If a test fails
 * and is known to fail, apply-* is changed with fail-*
 * before committing in order not to break the build.
 *
 * The applyf-* version of test applications is identical
 * to the apply-* version and is used as a marker during
 * work. This way we can easily switch back and forth between
 * fail-* and applyf-* with the editor's find & replace.
 *
 * When this test suite is complete and all bugs are fixed
 * and no further additions are expected, the fail-* and applyf-*
 * versions can be dropped.
 */

strategies

  apply-propconst-test(name | in-program, out-program) =
    apply-test(name, dr-ignore-state-cleanup(propconst|"PropConst"), <parse-til>in-program, <parse-til>out-program)

  applyf-propconst-test(name | in-program, out-program) =
    apply-propconst-test(name | in-program, out-program)

  fail-propconst-test(name | in-program, out-program) =
    apply-test(concat-fail(name), dr-ignore-state-cleanup(propconst|"PropConst"), <parse-til>in-program)

  show-propconst-test(name | in-program, out-program) =
    apply-and-show(name, dr-ignore-state-cleanup(propconst|"PropConst"), <parse-til>in-program)

strategies

  apply-dce-test(name | in-program, out-program) =
    apply-test(name, dr-ignore-state-cleanup(dce-program|["VarNeeded", "VarUsed"]), <parse-til>in-program, <parse-til>out-program)

  applyf-dce-test(name | in-program, out-program) =
    apply-dce-test(name | in-program, out-program)

  fail-dce-test(name | in-program, out-program) =
    apply-test(concat-fail(name), dr-ignore-state-cleanup(dce-program|["VarNeeded", "VarUsed"]), <parse-til>in-program)

  show-dce-test(name | in-program, out-program) =
    apply-and-show(name, dr-ignore-state-cleanup(dce-program|["VarNeeded", "VarUsed"]), <parse-til>in-program)

strategies

  apply-varunion-test(name | in-program, out-program) =
    apply-test(name, dr-ignore-state-cleanup(varunion|"VarUnion"), <parse-til>in-program, <parse-til>out-program)

  applyf-varunion-test(name | in-program, out-program) =
    apply-varunion-test(name | in-program, out-program)

  fail-varunion-test(name | in-program, out-program) =
    apply-test(concat-fail(name), dr-ignore-state-cleanup(varunion|"VarUnion"), <parse-til>in-program)
  
  show-varunion-test(name | in-program, out-program) =
    apply-and-show(name, dr-ignore-state-cleanup(varunion|"VarUnion"), <parse-til>in-program)

strategies

  apply-scope-test(name, s | result) =
    apply-test(name, dr-ignore-state-cleanup(s|"Test"), !(), !result)
    
  applyf-scope-test(name, s | result) =
    apply-scope-test(name, s | result)

  fail-scope-test(name, s | result) =
    apply-test(concat-fail(name), dr-ignore-state-cleanup(s|"Test"), !())

strategies

  parse-til =
    parse-string(|<get-til-parse-table>, "Program")

  get-til-parse-table =
    MemoTILParseTable
    <+ <ReadFromFile>"til/syn/TIL.tbl"
       ; open-parse-table => pt
       ; rules(MemoTILParseTable : _ -> pt)

/**
 * Strategies for easier setup of scoping tests
 */

strategies

  init-rule-set =
    dr-get-rule-set(|"Test")

  rule-scope =
    dr-begin-scope(|"Test")

  rule-scope(|label) =
    rule-scope
    ; dr-label-scope(|"Test", label)

  rule-scope(|key, value) =
    rule-scope
    ; dr-set-rule(|"Test", key, value)

  rule-scope(|label, key, value) =
    rule-scope(|label)
    ; dr-set-rule(|"Test", label, key, value)

  change-set =
    dr-start-change-set(|"Test")

  change-set(|key, value) =
    change-set
    ; dr-set-rule(|"Test", key, value)

  change-set(|label, key, value) =
    change-set
    ; dr-set-rule(|"Test", label, key, value)

  change-set-vis(|key, value) =
    change-set
    ; dr-set-rule-vis(|"Test", (), key, value)

  change-set-vis(|label, key, value) =
    change-set
    ; dr-set-rule-vis(|"Test", label, key, value)

  set(|key, value) =
    dr-set-rule(|"Test", key, value)

  set(|label, key, value) =
    dr-set-rule(|"Test", label, key, value)

  set-vis(|key, value) =
    dr-set-rule-vis(|"Test", (), key, value)

  set-vis(|label, key, value) =
    dr-set-rule-vis(|"Test", label, key, value)

  add(|key, value) =
    dr-add-rule(|"Test", key, value)

  add(|label, key, value) =
    dr-add-rule(|"Test", label, key, value)

  add-vis(|key, value) =
    dr-add-rule-vis(|"Test", (), key, value)

  add-vis(|label, key, value) =
    dr-add-rule-vis(|"Test", label, key, value)

  undef-rule(|key) =
    dr-undefine-rule(|"Test", key)

  undef-rule(|label, key) =
    dr-undefine-rule(|"Test", label, key)

  lookup-rule(|key) =
    dr-lookup-rule(|"Test", key)

  lookup-all-rules(| key) =
    dr-lookup-all-rules(|"Test", key)

  lookup-rule-in-scope(| label, key) =
    dr-get-rule-set(|"Test")
    ; dr-lookup-rule-in-scope(|key, <get-first-scope-id(|label)>)

  get-first-scope-id(| label) =
    fetch-elem(RuleScope(iset-contains(|label), ?Hashtable(<id>)); ?RuleScope(_, <id>))

strategies

  dr-ignore-state-cleanup(s | rname) =
    where (<not(?[_] <+ ?[])>rname)
    ; dr-ignore-state-cleanup(s|[rname])

  dr-ignore-state-cleanup(s | rnames) =
    where (<(?[_] <+ ?[])>rnames)
    ; where(
        <map(dr-new-rule-set)>rnames
        ; zip(dr-switch-rule-set | rnames) => rss
      )
    ; s
    ; where(
        <zip(dr-switch-rule-set | rnames)>rss
        ; map(map(dr-destroy-scope <+ dr-destroy-change-set))
      )

  concat-fail(name) =
    <concat-strings>[<name>, " (THIS TEST ACTUALLY FAILS!)"]

  separation-message(|msg) =
    separation-message(|msg, "=", 80)

  description-message(|msg) =
    description-message(|msg, "=", 80)

  /**
   * Prints a separation message.
   * Assuming fill-char is "=", the separation message will be
   *   ======= msg =======
   * The length indicates the desired length of the _entire_ message,
   * including the fill characters. msg will be truncated to fit.
   * If it truncation is necessary, "..." will be added at the end of
   * the truncated msg. The length must be >= 8, to allow for at least
   * = M... = (i.e., two separator chars, two spaces, the first letter
   * of the message and three dots).
   */
  separation-message(|msg, fill-char, length) =
    custom-message(|msg, fill-char, fill-char, length)

  /**
   * Same as separation message, except that it only uses the fill-char
   * as end-char (hence, the paramter name change), i.e. once at the
   * beginning and once at the end of the line, filling the rest with
   * spaces.
   *
   * Example:
   *  separation-message(|"abc", "=", 20) =>
   *   = abc ==============
   *  description-message(|"abc", "=", 20) =>
   *   = abc              =
   */
  description-message(|msg, end-char, length) =
    custom-message(|msg, " ", end-char, length)

  /**
   * @internal
   */
  custom-message(|msg, fill-char, end-char, length) =
    (<geq>(length, 8) < !length + !8)
    ; <subt>(<id>, 7) => l
    ; <subt>(l, <string-length>msg) => diff
    ; (<lt>(diff, 0)
       < <explode-string; take(|l); implode-string>msg
         ; <concat-strings>[end-char, " ", <id>, "... ", end-char]
       + <copy; concat-strings>(diff, fill-char)
         ; <concat-strings>[end-char, " ", msg, " ", <id>, end-char]
      )
    ; say(id)
