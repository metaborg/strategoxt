module parse-stratego
imports
  libstratego-xtc
  Stratego
  libstratego-lib
  libstratego-sglr
  
/**
 * Structure of meta files.
 */
signature
  constructors
    Meta    : List(MetaProperty) -> MetaData
    Syntax  : String -> MetaProperty
    TopSort : String -> MetaProperty
    HeuristicFilters : Switch -> MetaProperty
    ImplodeQuotes    : Switch -> MetaProperty
    YieldQuotes      : Switch -> MetaProperty
    On  : Switch
    Off : Switch

overlays
  
  PS_FS_TIMESTAMP_GRANULARITY = 2

strategies

  parse-stratego-options =
    ArgOption("-I" + "--Include"
    , where(<post-extend-config> ("-I", [<id>]))
    , !"-I p|--Include p   include modules from directory p"
    )

  + ArgOption("--syntax", where(<set-config>("--syntax", <id>)),
	      !"--syntax syn        use syntax syn")

  + ArgOption("--default-syntax", where(<set-config>("--default-syntax", <id>)),
	      !"--default-syntax syn        use syntax syn as default")

  + Option("-silent", where(<set-config>("--verbose", 0)),
	      !"-silent ")

  + Option("--asfix", where(<set-config>("--asfix", 1)), !"--asfix")

  + ArgOption("--cache-dir",
        where(<set-config> ("--cache-dir", <where(file-exists; filemode; isdir <+ mkdir)>)); !(),
        !"--cache-dir <dir>  Maintain a parse cache in <dir>")

  + ArgOption("--desugaring", where(<set-config>("--desugaring", <id>)),
	      !"--desugaring on/off : turn desugaring on or off (default: off)")

  + ArgOption("--assimilation", where(<set-config>("--assimilation", <id>)),
	      !"--assimilation on/off : turn assimilation on or off (default: on)")

  + ArgOption("-la", id,
              !"-la <name>         Ignored (for command-line compatibility with strc).")

  + Option(fail, fail, !"")
  + Option(fail, fail, !"Preserving options:")

  + ps-preserve-comments-option
  + ps-preserve-positions-option
  + ps-preserve-locations-option
  
  + Option(fail, fail, !"")
  + Option(fail, fail, !"I/O options:")


strategies

  ps-preserve-comments-option =
    Option("--preserve-comments"
    , <ps-set-preserve-comments> "yes"
    , !"--preserve-comments   
                    Preserve source code comments as annotations of the abstract 
                    syntax tree. [off]"
    )

  ps-set-preserve-comments =
    <set-config> ("preserve-comments", <id>)

  ps-must-preserve-comments =
    <get-config> "preserve-comments" => "yes"

strategies

  ps-preserve-positions-option =
    Option("--preserve-positions"
    , <ps-set-preserve-positions> "yes"
    , !"--preserve-positions
                    Preserve source code positions in the input file as annotations 
                    of the abstract syntax tree. [off]"
    )

  ps-set-preserve-positions =
    <set-config> ("preserve-positions", <id>)

  ps-must-preserve-positions =
    <get-config> "preserve-positions" => "yes"

strategies

  ps-preserve-locations-option =
    Option("--preserve-locations"
    , <ps-set-preserve-locations> "yes"
    , !"--preserve-locations
                    Preserve source code locations in the input file as annotations 
                    of the abstract syntax tree. [off]"
    )

  ps-set-preserve-locations =
    <set-config> ("preserve-locations", <id>)

  ps-must-preserve-locations =
    <get-config> "preserve-locations" => "yes"

strategies

  parse-stratego-file =
    parse-stratego-trm(|["-i", <id>])

  parse-stratego-trm(|args) = dbg(|["parse-stratego-trm"]); 
    where(id
      ; incl := <get-config <+ ![]> "-I"
      ; <set-config> ("-I", [])
      ; <parse-options(parse-stratego-options <+ input-options, system-usage, id)> 
          [<whoami <+ !"strc"> | args]
      ; where(<extend-config> ("-I", ["./", <xtc-find-path> "StrategoRenamed.sdf"]))
    )
    ; ps-parse-module-trm
    ; where(<set-config>("-I", incl))
    
  ps-find-in-includes(msg) =
    <find-in-path> (<id>, <get-config> "-I")
  ; log(|Notice(),<concat-strings>[<msg>,<id>])

strategies

  /**
   * @todo Maybe this should be in libstratego-sglr
   */
  strc-memo-open-parse-table(gettbl) =
    strc-MemoParseTable
    <+ ?key
       ; gettbl
       ; tbl := <open-parse-table>
       ; rules(strc-MemoParseTable : key -> tbl)

  /**
   * Parses a Stratego module.
   *
   * @type FILE -> FILE
   */
  ps-parse-module-trm =
      file@FILE(filename) := <xtc-ensure-file>
    ; where(id
      ; base := <remove-extension> filename
      ; path := <path-of-xtc-file> file
      )
    ; !path
    ; ps-parse-cached(
        log(|Notice(), <concat-strings>["Parsing file ", filename])
      ; meta := <ps-get-meta> file
      ; tbl  := <ps-get-syntax; ps-get-parse-table> meta
    
      // sglr settings
      ; <ps-set-filters> meta
      ; srt := <ps-get-sort> meta

      // try to use the faster jsglr2
      ( <parse-xtc-file-pt-jsglr2(|tbl, srt, path)> file

      <+
    
      ; <parse-xtc-file-pt(err(|["cannot open file ", path]), strsglr-report-parse-error | tbl, srt, path)> file

      ; if <ps-must-preserve-comments> meta then
          asfix-anno-comments(| [ "ShortCom", "LongCom", "Comment" ] )
        end

      ; if <ps-must-preserve-positions> meta then
          asfix-anno-position-info(|"")
        end

      ; if <ps-must-preserve-locations> meta then
          asfix-anno-location
        end

      ; if <ps-must-preserve-asfix-in-quotes> meta then
          implode-asfix-skip-concrete-syntax
        else
          implode-asfix
        end

      ; if <ps-must-yield-quotes> meta then
          yield-asfix-quotes
        end
      )
    
    ; if-keep1(where(write-to; copy-to(<guarantee-extension(|"atree")> base)))

    ; if not(<get-config> "--assimilation" => "off") then
        // FIXME (from martin) : I have no idea what this does exactly in meta-explode
        if <ps-must-preserve-asfix-in-quotes> meta then
          meta-explode(true)
        else
          meta-explode(false)
        end
      end
    )

    ; where(if-not-silent(ps-check-module-name(|base)))

    ; if <get-config> "--desugaring" => "on" then
        stratego-desugar
      end

  parse-xtc-file-pt-jsglr2(|tbl, start-symbol, path) =
    where(<try(memo-open-parse-table)> tbl => ParseTable(internal-tbl))
    ; let open-stream = ?FILE(<id>) < <fopen> (<id>, "r") + ?stdin(); stdin-stream
      in open-stream => Stream(stream)
       ; finally(
           prim("STRSGLR_parse_stream_pt" | stream, internal-tbl, start-symbol, path)
         , <fclose> stream
         )
      end

/**
 * Parse caching.
 */
strategies

  ps-parse-cached(parse):
    path -> ast
    where
      if <get-config> "--cache-dir"; ps-uses-default-implode-options then
        abs-path   := <abspath> path
      ; cache-path := <ps-cache-path> abs-path
      ; (   <ps-is-newer> (cache-path, path)
          ; ast := <ReadFromFile> cache-path
        <+
            ast := <parse> path
          ; <WriteToBinaryFile <+ log(|Warning(), <concat-strings>["Unable to cache parse result to ", cache-path])> (cache-path, ast)
        )
      else
        ast := <parse>
      end
  
  /** Succeeds if the default option flags are used. (Ignores --desugar.) */
  ps-uses-default-implode-options =
    not(
      ps-must-preserve-comments
    + ps-must-preserve-positions
    + ps-must-preserve-asfix-in-quotes
    + ps-must-yield-quotes
    )
    
  ps-is-newer:
    (file1, file2) -> <id>
    where
      <gt> (<file-exists; modification-time> file1,
            <file-exists; modification-time; ps-add-fs-granularity> file2)
  
  ps-add-fs-granularity:
    timestamp -> <add> (timestamp, PS_FS_TIMESTAMP_GRANULARITY())
  
  ps-cache-path:
    full-path -> cache-path
    with
      cache-dir  := <get-config> "--cache-dir";
      full-path' := <string-replace(|"/", "+"); string-replace(|"\\", "+"); string-replace(|":", "+")> full-path;
      cache-path := $[[cache-dir]/[full-path'].cache]

/**
 * Main parsing strategies.
 */

strategies

  ps-check-module-name(|base) =
    ?Module(n,_)
    ; if not( !(<base-filename> base,<base-filename>n) => (x,x) ) then
        log(|Warning(),<concat-strings>
          ["Mismatch between basename of input file ("
          , base
          , ") and module name (", n,") specified"
          ]
        )
      end

  ps-check-module-name(|base) =
    ?Specification(_)

strategies

  /**
   * @type MetaData -> Sort
   * 
   * note: default value is None(), since start-symbol of Stratego syntax may get renamed in case 
   * of concrete syntax embeddings
   */  
  ps-get-sort =
    if ?Meta(<fetch-elem(?TopSort(s))>); <is-string> s then
      !s
    else
      !None()
    end

  /**
   * @type MetaData 
   */  
  ps-set-filters = 
    if ?Meta(<fetch-elem(?HeuristicFilters(value))>) then
      switch !value
        case On():  set-heuristic-filters(true)
                    ; dbg(|"heuristic filters set")
        case Off(): set-heuristic-filters(false)
                    ; dbg(|"heuristic filters not set")
        otherwise:  fatal-err(|"Illegal value of HeuristicFilters option: use On() or Off()")
      end
    else
      // FIXME: for now, heuristic filters are enabled for concrete object syntax.
      set-heuristic-filters(true)
      ; dbg(|"heuristic filters set")
    end

strategies
   
  /**
   * Succeeds if AsFix in quotations should not be imploded.
   * AsFix in quotes must be preserved with the --asfix command-line option.
   */
  ps-must-preserve-asfix-in-quotes =
    where(<get-config> "--asfix")

  /**
   * Succeeds if AsFix in quotations should not be imploded.
   * AsFix in quotes must be preserved when the quotes will not be imploded.
   */
  ps-must-preserve-asfix-in-quotes =
    where(
      ?Meta(<fetch-elem(?ImplodeQuotes(value))>)
      ; switch !value
          case On():  fail
          case Off(): id
          otherwise:  fatal-err(|"Illegal value of ImplodeQuotes otion: use On() or Off()")
        end
    )

  /**
   * Succeeds if AsFix in quotations should not be imploded.
   * Implementation detail: if quotes are to be yielded, then they should not
   * be imploded either.
   */
  ps-must-preserve-asfix-in-quotes =
    ps-must-yield-quotes

strategies

  ps-must-yield-quotes =
    if ?Meta(<fetch-elem(?YieldQuotes(value))>) then
      switch !value
        case On():  true
        case Off(): false
        otherwise:  fatal-err(|"Illegal value of YieldQuotes otion: use On() or Off()")
      end
    else
      false
    end
    
strategies

  /**
   * Returns the MetaData for a file.
   *
   * @type FILE -> MetaData
   */
  ps-get-meta = 
    ( /* first option: meta file */
       ?FILE(file)
     ; FILE(guarantee-extension(|"meta"))
     ; read-from
     ; if not(Meta(is-list)) then
         log(|Warning(),<concat-strings>["Meta data for file ", file, " not well-formed :"], <id>)
       ; fail
       end
    <+ /* final option: no metadata */
       !Meta([
          HeuristicFilters(Off())
        ])
     )
   ; log(|Debug(),"Using meta data :", <id>)

  /**
   * Determines the syntax to be used.
   *
   * @type MetaData -> String
   */
  ps-get-syntax = 
     ( /* first option: meta file */
        ?Meta(<fetch-elem(?Syntax(<id>))>)
     <+ /* second option: --default syntax */
        <get-config> "--default-syntax"
     <+ /* final option: plain Stratego */
        !"Stratego"
      )
    ; log(|Notice(),<concat-strings>["Using syntax ",<id>])

  /**
   * @type String -> FILE
   */
  ps-get-parse-table =
    (/* standard syntax definition */
      ? "Stratego"
      ; import-term(Stratego.tbl)
      
    <+ /* custom parse table based on meta file */
      ?syntax
      ; log(|Debug(), <concat-strings>["Trying to find a parse table for ",syntax])
      ; guarantee-extension(|"tbl")
      ; ps-find-in-includes(!"Using parse table: ") => file
      ; rules( FileDependencies :+= file )
      ; !FILE(<id>)
      ; read-from

    <+ <error> ["cannot find the parse table for syntax \"", <id>, "\" in the include path"]
       ; fail
    )
    ; ?tbl
    ; strc-memo-open-parse-table(!tbl)
